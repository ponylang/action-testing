{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages http","title":"http"},{"location":"http--index/","text":"This package includes all the support functions necessary to build client and server applications for the HTTP protocol. The important interfaces an application needs to deal with are: HTTPSession , the API to an HTTP connection. HTTPHandler , the interface to a handler you need to write that will receive notifications from the HTTPSession . HandlerFactory , the interface to a class you need to write that creates instances of your HTTPHandler . Payload , the class that represents a single HTTP message, with its headers. If you are writing a client, you will need to deal with the HTTPClient class. If you are writing a server, you will need to deal with the HTTPServer class. Public Types \u00b6 primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart primitive URLEncode class URL trait Status primitive StatusContinue primitive StatusSwitchingProtocols primitive StatusOK primitive StatusCreated primitive StatusAccepted primitive StatusNonAuthoritativeInfo primitive StatusNoContent primitive StatusResetContent primitive StatusPartialContent primitive StatusMultipleChoices primitive StatusMovedPermanently primitive StatusFound primitive StatusSeeOther primitive StatusNotModified primitive StatusUseProxy primitive StatusTemporaryRedirect primitive StatusBadRequest primitive StatusUnauthorized primitive StatusPaymentRequired primitive StatusForbidden primitive StatusNotFound primitive StatusMethodNotAllowed primitive StatusNotAcceptable primitive StatusProxyAuthRequired primitive StatusRequestTimeout primitive StatusConflict primitive StatusGone primitive StatusLengthRequired primitive StatusPreconditionFailed primitive StatusRequestEntityTooLarge primitive StatusRequestURITooLong primitive StatusUnsupportedMediaType primitive StatusRequestedRangeNotSatisfiable primitive StatusExpectationFailed primitive StatusTeapot primitive StatusPreconditionRequired primitive StatusTooManyRequests primitive StatusRequestHeaderFieldsTooLarge primitive StatusUnavailableForLegalReasons primitive StatusInternalServerError primitive StatusNotImplemented primitive StatusBadGateway primitive StatusServiceUnavailable primitive StatusGatewayTimeout primitive StatusHTTPVersionNotSupported primitive StatusNetworkAuthenticationRequired interface Logger interface ServerNotify actor HTTPServer primitive ChunkedTransfer primitive StreamTransfer primitive OneshotTransfer type TransferMode class Payload primitive MimeTypes interface HTTPSession primitive ParseError class HTTPParser primitive AuthFailed primitive ConnectionClosed primitive ConnectFailed type HTTPFailureReason interface HTTPHandler interface HandlerFactory primitive DiscardLog class ContentsLog class CommonLog class HTTPClient","title":"Package"},{"location":"http--index/#public-types","text":"primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart primitive URLEncode class URL trait Status primitive StatusContinue primitive StatusSwitchingProtocols primitive StatusOK primitive StatusCreated primitive StatusAccepted primitive StatusNonAuthoritativeInfo primitive StatusNoContent primitive StatusResetContent primitive StatusPartialContent primitive StatusMultipleChoices primitive StatusMovedPermanently primitive StatusFound primitive StatusSeeOther primitive StatusNotModified primitive StatusUseProxy primitive StatusTemporaryRedirect primitive StatusBadRequest primitive StatusUnauthorized primitive StatusPaymentRequired primitive StatusForbidden primitive StatusNotFound primitive StatusMethodNotAllowed primitive StatusNotAcceptable primitive StatusProxyAuthRequired primitive StatusRequestTimeout primitive StatusConflict primitive StatusGone primitive StatusLengthRequired primitive StatusPreconditionFailed primitive StatusRequestEntityTooLarge primitive StatusRequestURITooLong primitive StatusUnsupportedMediaType primitive StatusRequestedRangeNotSatisfiable primitive StatusExpectationFailed primitive StatusTeapot primitive StatusPreconditionRequired primitive StatusTooManyRequests primitive StatusRequestHeaderFieldsTooLarge primitive StatusUnavailableForLegalReasons primitive StatusInternalServerError primitive StatusNotImplemented primitive StatusBadGateway primitive StatusServiceUnavailable primitive StatusGatewayTimeout primitive StatusHTTPVersionNotSupported primitive StatusNetworkAuthenticationRequired interface Logger interface ServerNotify actor HTTPServer primitive ChunkedTransfer primitive StreamTransfer primitive OneshotTransfer type TransferMode class Payload primitive MimeTypes interface HTTPSession primitive ParseError class HTTPParser primitive AuthFailed primitive ConnectionClosed primitive ConnectFailed type HTTPFailureReason interface HTTPHandler interface HandlerFactory primitive DiscardLog class ContentsLog class CommonLog class HTTPClient","title":"Public Types"},{"location":"http-AuthFailed/","text":"AuthFailed \u00b6 [Source] HTTP failure reason for when SSL Authentication failed. This failure reason is only reported to HTTP client HTTPHandler instances. primitive val AuthFailed Constructors \u00b6 create \u00b6 [Source] new val create() : AuthFailed val^ Returns \u00b6 AuthFailed val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AuthFailed val) : Bool val Parameters \u00b6 that: AuthFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AuthFailed val) : Bool val Parameters \u00b6 that: AuthFailed val Returns \u00b6 Bool val","title":"primitive AuthFailed"},{"location":"http-AuthFailed/#authfailed","text":"[Source] HTTP failure reason for when SSL Authentication failed. This failure reason is only reported to HTTP client HTTPHandler instances. primitive val AuthFailed","title":"AuthFailed"},{"location":"http-AuthFailed/#constructors","text":"","title":"Constructors"},{"location":"http-AuthFailed/#create","text":"[Source] new val create() : AuthFailed val^","title":"create"},{"location":"http-AuthFailed/#returns","text":"AuthFailed val^","title":"Returns"},{"location":"http-AuthFailed/#public-functions","text":"","title":"Public Functions"},{"location":"http-AuthFailed/#eq","text":"[Source] fun box eq( that: AuthFailed val) : Bool val","title":"eq"},{"location":"http-AuthFailed/#parameters","text":"that: AuthFailed val","title":"Parameters"},{"location":"http-AuthFailed/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-AuthFailed/#ne","text":"[Source] fun box ne( that: AuthFailed val) : Bool val","title":"ne"},{"location":"http-AuthFailed/#parameters_1","text":"that: AuthFailed val","title":"Parameters"},{"location":"http-AuthFailed/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-ChunkedTransfer/","text":"ChunkedTransfer \u00b6 [Source] primitive val ChunkedTransfer Constructors \u00b6 create \u00b6 [Source] new val create() : ChunkedTransfer val^ Returns \u00b6 ChunkedTransfer val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ChunkedTransfer val) : Bool val Parameters \u00b6 that: ChunkedTransfer val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ChunkedTransfer val) : Bool val Parameters \u00b6 that: ChunkedTransfer val Returns \u00b6 Bool val","title":"primitive ChunkedTransfer"},{"location":"http-ChunkedTransfer/#chunkedtransfer","text":"[Source] primitive val ChunkedTransfer","title":"ChunkedTransfer"},{"location":"http-ChunkedTransfer/#constructors","text":"","title":"Constructors"},{"location":"http-ChunkedTransfer/#create","text":"[Source] new val create() : ChunkedTransfer val^","title":"create"},{"location":"http-ChunkedTransfer/#returns","text":"ChunkedTransfer val^","title":"Returns"},{"location":"http-ChunkedTransfer/#public-functions","text":"","title":"Public Functions"},{"location":"http-ChunkedTransfer/#eq","text":"[Source] fun box eq( that: ChunkedTransfer val) : Bool val","title":"eq"},{"location":"http-ChunkedTransfer/#parameters","text":"that: ChunkedTransfer val","title":"Parameters"},{"location":"http-ChunkedTransfer/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-ChunkedTransfer/#ne","text":"[Source] fun box ne( that: ChunkedTransfer val) : Bool val","title":"ne"},{"location":"http-ChunkedTransfer/#parameters_1","text":"that: ChunkedTransfer val","title":"Parameters"},{"location":"http-ChunkedTransfer/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-CommonLog/","text":"CommonLog \u00b6 [Source] Logs HTTP requests in the common log format. class ref CommonLog is Logger val Implements \u00b6 Logger val Constructors \u00b6 create \u00b6 [Source] new val create( out: OutStream tag) : CommonLog val^ Parameters \u00b6 out: OutStream tag Returns \u00b6 CommonLog val^ Public Functions \u00b6 apply \u00b6 [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val Parameters \u00b6 ip: String val body_size: USize val request: Payload val response: Payload val Returns \u00b6 None val","title":"class CommonLog"},{"location":"http-CommonLog/#commonlog","text":"[Source] Logs HTTP requests in the common log format. class ref CommonLog is Logger val","title":"CommonLog"},{"location":"http-CommonLog/#implements","text":"Logger val","title":"Implements"},{"location":"http-CommonLog/#constructors","text":"","title":"Constructors"},{"location":"http-CommonLog/#create","text":"[Source] new val create( out: OutStream tag) : CommonLog val^","title":"create"},{"location":"http-CommonLog/#parameters","text":"out: OutStream tag","title":"Parameters"},{"location":"http-CommonLog/#returns","text":"CommonLog val^","title":"Returns"},{"location":"http-CommonLog/#public-functions","text":"","title":"Public Functions"},{"location":"http-CommonLog/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val","title":"apply"},{"location":"http-CommonLog/#parameters_1","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"http-CommonLog/#returns_1","text":"None val","title":"Returns"},{"location":"http-ConnectFailed/","text":"ConnectFailed \u00b6 [Source] HTTP failure reason for when a connection could not be established. This failure reason is only valid for HTTP client HTTPHandlers. primitive val ConnectFailed Constructors \u00b6 create \u00b6 [Source] new val create() : ConnectFailed val^ Returns \u00b6 ConnectFailed val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ConnectFailed val) : Bool val Parameters \u00b6 that: ConnectFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ConnectFailed val) : Bool val Parameters \u00b6 that: ConnectFailed val Returns \u00b6 Bool val","title":"primitive ConnectFailed"},{"location":"http-ConnectFailed/#connectfailed","text":"[Source] HTTP failure reason for when a connection could not be established. This failure reason is only valid for HTTP client HTTPHandlers. primitive val ConnectFailed","title":"ConnectFailed"},{"location":"http-ConnectFailed/#constructors","text":"","title":"Constructors"},{"location":"http-ConnectFailed/#create","text":"[Source] new val create() : ConnectFailed val^","title":"create"},{"location":"http-ConnectFailed/#returns","text":"ConnectFailed val^","title":"Returns"},{"location":"http-ConnectFailed/#public-functions","text":"","title":"Public Functions"},{"location":"http-ConnectFailed/#eq","text":"[Source] fun box eq( that: ConnectFailed val) : Bool val","title":"eq"},{"location":"http-ConnectFailed/#parameters","text":"that: ConnectFailed val","title":"Parameters"},{"location":"http-ConnectFailed/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-ConnectFailed/#ne","text":"[Source] fun box ne( that: ConnectFailed val) : Bool val","title":"ne"},{"location":"http-ConnectFailed/#parameters_1","text":"that: ConnectFailed val","title":"Parameters"},{"location":"http-ConnectFailed/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-ConnectionClosed/","text":"ConnectionClosed \u00b6 [Source] HTTP failure reason for when the connection was closed either from the other side (detectable when using TCP keepalive) or locally (e.g. due to an error). primitive val ConnectionClosed Constructors \u00b6 create \u00b6 [Source] new val create() : ConnectionClosed val^ Returns \u00b6 ConnectionClosed val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ConnectionClosed val) : Bool val Parameters \u00b6 that: ConnectionClosed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ConnectionClosed val) : Bool val Parameters \u00b6 that: ConnectionClosed val Returns \u00b6 Bool val","title":"primitive ConnectionClosed"},{"location":"http-ConnectionClosed/#connectionclosed","text":"[Source] HTTP failure reason for when the connection was closed either from the other side (detectable when using TCP keepalive) or locally (e.g. due to an error). primitive val ConnectionClosed","title":"ConnectionClosed"},{"location":"http-ConnectionClosed/#constructors","text":"","title":"Constructors"},{"location":"http-ConnectionClosed/#create","text":"[Source] new val create() : ConnectionClosed val^","title":"create"},{"location":"http-ConnectionClosed/#returns","text":"ConnectionClosed val^","title":"Returns"},{"location":"http-ConnectionClosed/#public-functions","text":"","title":"Public Functions"},{"location":"http-ConnectionClosed/#eq","text":"[Source] fun box eq( that: ConnectionClosed val) : Bool val","title":"eq"},{"location":"http-ConnectionClosed/#parameters","text":"that: ConnectionClosed val","title":"Parameters"},{"location":"http-ConnectionClosed/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-ConnectionClosed/#ne","text":"[Source] fun box ne( that: ConnectionClosed val) : Bool val","title":"ne"},{"location":"http-ConnectionClosed/#parameters_1","text":"that: ConnectionClosed val","title":"Parameters"},{"location":"http-ConnectionClosed/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-ContentsLog/","text":"ContentsLog \u00b6 [Source] Logs the contents of HTTP requests and responses. class ref ContentsLog is Logger val Implements \u00b6 Logger val Constructors \u00b6 create \u00b6 [Source] new val create( out: OutStream tag) : ContentsLog val^ Parameters \u00b6 out: OutStream tag Returns \u00b6 ContentsLog val^ Public Functions \u00b6 apply \u00b6 [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val Parameters \u00b6 ip: String val body_size: USize val request: Payload val response: Payload val Returns \u00b6 None val","title":"class ContentsLog"},{"location":"http-ContentsLog/#contentslog","text":"[Source] Logs the contents of HTTP requests and responses. class ref ContentsLog is Logger val","title":"ContentsLog"},{"location":"http-ContentsLog/#implements","text":"Logger val","title":"Implements"},{"location":"http-ContentsLog/#constructors","text":"","title":"Constructors"},{"location":"http-ContentsLog/#create","text":"[Source] new val create( out: OutStream tag) : ContentsLog val^","title":"create"},{"location":"http-ContentsLog/#parameters","text":"out: OutStream tag","title":"Parameters"},{"location":"http-ContentsLog/#returns","text":"ContentsLog val^","title":"Returns"},{"location":"http-ContentsLog/#public-functions","text":"","title":"Public Functions"},{"location":"http-ContentsLog/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val","title":"apply"},{"location":"http-ContentsLog/#parameters_1","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"http-ContentsLog/#returns_1","text":"None val","title":"Returns"},{"location":"http-DiscardLog/","text":"DiscardLog \u00b6 [Source] Doesn't log anything. primitive val DiscardLog Constructors \u00b6 create \u00b6 [Source] new val create() : DiscardLog val^ Returns \u00b6 DiscardLog val^ Public Functions \u00b6 apply \u00b6 [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val Parameters \u00b6 ip: String val body_size: USize val request: Payload val response: Payload val Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: DiscardLog val) : Bool val Parameters \u00b6 that: DiscardLog val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DiscardLog val) : Bool val Parameters \u00b6 that: DiscardLog val Returns \u00b6 Bool val","title":"primitive DiscardLog"},{"location":"http-DiscardLog/#discardlog","text":"[Source] Doesn't log anything. primitive val DiscardLog","title":"DiscardLog"},{"location":"http-DiscardLog/#constructors","text":"","title":"Constructors"},{"location":"http-DiscardLog/#create","text":"[Source] new val create() : DiscardLog val^","title":"create"},{"location":"http-DiscardLog/#returns","text":"DiscardLog val^","title":"Returns"},{"location":"http-DiscardLog/#public-functions","text":"","title":"Public Functions"},{"location":"http-DiscardLog/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : None val","title":"apply"},{"location":"http-DiscardLog/#parameters","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"http-DiscardLog/#returns_1","text":"None val","title":"Returns"},{"location":"http-DiscardLog/#eq","text":"[Source] fun box eq( that: DiscardLog val) : Bool val","title":"eq"},{"location":"http-DiscardLog/#parameters_1","text":"that: DiscardLog val","title":"Parameters"},{"location":"http-DiscardLog/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-DiscardLog/#ne","text":"[Source] fun box ne( that: DiscardLog val) : Bool val","title":"ne"},{"location":"http-DiscardLog/#parameters_2","text":"that: DiscardLog val","title":"Parameters"},{"location":"http-DiscardLog/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-HTTPClient/","text":"HTTPClient \u00b6 [Source] Manages a group of HTTP connections on behalf of a client application. A client should create one instance of this class. class ref HTTPClient Constructors \u00b6 create \u00b6 [Source] Create the context in which all HTTP sessions will originate. Parameters: - keepalive_timeout_secs: Use TCP Keepalive and check if the other side is down every keepalive_timeout_secs seconds. new ref create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), sslctx: (SSLContext val | None val) = reference, pipeline: Bool val = true, keepalive_timeout_secs: U32 val = 0) : HTTPClient ref^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) sslctx: ( SSLContext val | None val) = reference pipeline: Bool val = true keepalive_timeout_secs: U32 val = 0 Returns \u00b6 HTTPClient ref^ Public Functions \u00b6 apply \u00b6 [Source] Schedule a request on an HTTP session. If a new connection is created, a new instance of the application's Receive Handler will be created for it. A val copy of the Payload is returned, and it can not be modified after this point. This is useful in Stream and Chunked transfer modes, so that the application can follow up with calls to Client.send_body . fun ref apply( request: Payload trn, handlermaker: HandlerFactory val) : Payload val ? Parameters \u00b6 request: Payload trn handlermaker: HandlerFactory val Returns \u00b6 Payload val ? dispose \u00b6 [Source] Disposes the sessions and cancels all pending requests. fun ref dispose() : None val Returns \u00b6 None val send_body \u00b6 [Source] fun ref send_body( data: (String val | Array[U8 val] val), session: HTTPSession tag) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) session: HTTPSession tag Returns \u00b6 None val","title":"class HTTPClient"},{"location":"http-HTTPClient/#httpclient","text":"[Source] Manages a group of HTTP connections on behalf of a client application. A client should create one instance of this class. class ref HTTPClient","title":"HTTPClient"},{"location":"http-HTTPClient/#constructors","text":"","title":"Constructors"},{"location":"http-HTTPClient/#create","text":"[Source] Create the context in which all HTTP sessions will originate. Parameters: - keepalive_timeout_secs: Use TCP Keepalive and check if the other side is down every keepalive_timeout_secs seconds. new ref create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), sslctx: (SSLContext val | None val) = reference, pipeline: Bool val = true, keepalive_timeout_secs: U32 val = 0) : HTTPClient ref^","title":"create"},{"location":"http-HTTPClient/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) sslctx: ( SSLContext val | None val) = reference pipeline: Bool val = true keepalive_timeout_secs: U32 val = 0","title":"Parameters"},{"location":"http-HTTPClient/#returns","text":"HTTPClient ref^","title":"Returns"},{"location":"http-HTTPClient/#public-functions","text":"","title":"Public Functions"},{"location":"http-HTTPClient/#apply","text":"[Source] Schedule a request on an HTTP session. If a new connection is created, a new instance of the application's Receive Handler will be created for it. A val copy of the Payload is returned, and it can not be modified after this point. This is useful in Stream and Chunked transfer modes, so that the application can follow up with calls to Client.send_body . fun ref apply( request: Payload trn, handlermaker: HandlerFactory val) : Payload val ?","title":"apply"},{"location":"http-HTTPClient/#parameters_1","text":"request: Payload trn handlermaker: HandlerFactory val","title":"Parameters"},{"location":"http-HTTPClient/#returns_1","text":"Payload val ?","title":"Returns"},{"location":"http-HTTPClient/#dispose","text":"[Source] Disposes the sessions and cancels all pending requests. fun ref dispose() : None val","title":"dispose"},{"location":"http-HTTPClient/#returns_2","text":"None val","title":"Returns"},{"location":"http-HTTPClient/#send_body","text":"[Source] fun ref send_body( data: (String val | Array[U8 val] val), session: HTTPSession tag) : None val","title":"send_body"},{"location":"http-HTTPClient/#parameters_2","text":"data: ( String val | Array [ U8 val] val) session: HTTPSession tag","title":"Parameters"},{"location":"http-HTTPClient/#returns_3","text":"None val","title":"Returns"},{"location":"http-HTTPFailureReason/","text":"HTTPFailureReason \u00b6 [Source] HTTP failure reason reported to HTTPHandler.failed() . type HTTPFailureReason is (AuthFailed val | ConnectionClosed val | ConnectFailed val) Type Alias For \u00b6 ( AuthFailed val | ConnectionClosed val | ConnectFailed val)","title":"type HTTPFailureReason"},{"location":"http-HTTPFailureReason/#httpfailurereason","text":"[Source] HTTP failure reason reported to HTTPHandler.failed() . type HTTPFailureReason is (AuthFailed val | ConnectionClosed val | ConnectFailed val)","title":"HTTPFailureReason"},{"location":"http-HTTPFailureReason/#type-alias-for","text":"( AuthFailed val | ConnectionClosed val | ConnectFailed val)","title":"Type Alias For"},{"location":"http-HTTPHandler/","text":"HTTPHandler \u00b6 [Source] This is the interface through which HTTP messages are delivered to application code. On the server, this will be HTTP Requests (GET, HEAD, DELETE, POST, etc) sent from a client. On the client, this will be the HTTP Responses coming back from the server. The protocol is largely symmetrical and the same interface definition is used, though what processing happens behind the interface will of course vary. This interface delivers asynchronous events when receiving an HTTP message (called a Payload ). Calls to these methods are made in the context of the HTTPSession actor so most of them should be passing data on to a processing actor. Each HTTPSession must have a unique instance of the handler. The application code does not necessarily know when an HTTPSession is created, so the application must provide an instance of HandlerFactory that will be called at the appropriate time. interface ref HTTPHandler Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( payload: Payload val) : Any tag Parameters \u00b6 payload: Payload val Returns \u00b6 Any tag chunk \u00b6 [Source] Notification of incoming body data. The body belongs to the most recent Payload delivered by an apply notification. fun ref chunk( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val finished \u00b6 [Source] Notification that no more body chunks are coming. Delivery of this HTTP message is complete. fun ref finished() : None val Returns \u00b6 None val cancelled \u00b6 [Source] Notification that transferring the payload has been cancelled locally, e.g. by disposing the client, closing the server or manually cancelling a single request. fun ref cancelled() : None val Returns \u00b6 None val failed \u00b6 [Source] Notification about failure to transfer the payload (e.g. connection could not be established, authentication failed, connection was closed prematurely, ...) fun ref failed( reason: (AuthFailed val | ConnectionClosed val | ConnectFailed val)) : None val Parameters \u00b6 reason: ( AuthFailed val | ConnectionClosed val | ConnectFailed val) Returns \u00b6 None val throttled \u00b6 [Source] Notification that the session temporarily can not accept more data. fun ref throttled() : None val Returns \u00b6 None val unthrottled \u00b6 [Source] Notification that the session can resume accepting data. fun ref unthrottled() : None val Returns \u00b6 None val need_body \u00b6 [Source] Notification that the HTTPSession is ready for Stream or Chunked body data. fun ref need_body() : None val Returns \u00b6 None val","title":"interface HTTPHandler"},{"location":"http-HTTPHandler/#httphandler","text":"[Source] This is the interface through which HTTP messages are delivered to application code. On the server, this will be HTTP Requests (GET, HEAD, DELETE, POST, etc) sent from a client. On the client, this will be the HTTP Responses coming back from the server. The protocol is largely symmetrical and the same interface definition is used, though what processing happens behind the interface will of course vary. This interface delivers asynchronous events when receiving an HTTP message (called a Payload ). Calls to these methods are made in the context of the HTTPSession actor so most of them should be passing data on to a processing actor. Each HTTPSession must have a unique instance of the handler. The application code does not necessarily know when an HTTPSession is created, so the application must provide an instance of HandlerFactory that will be called at the appropriate time. interface ref HTTPHandler","title":"HTTPHandler"},{"location":"http-HTTPHandler/#public-functions","text":"","title":"Public Functions"},{"location":"http-HTTPHandler/#apply","text":"[Source] fun ref apply( payload: Payload val) : Any tag","title":"apply"},{"location":"http-HTTPHandler/#parameters","text":"payload: Payload val","title":"Parameters"},{"location":"http-HTTPHandler/#returns","text":"Any tag","title":"Returns"},{"location":"http-HTTPHandler/#chunk","text":"[Source] Notification of incoming body data. The body belongs to the most recent Payload delivered by an apply notification. fun ref chunk( data: (String val | Array[U8 val] val)) : None val","title":"chunk"},{"location":"http-HTTPHandler/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"http-HTTPHandler/#returns_1","text":"None val","title":"Returns"},{"location":"http-HTTPHandler/#finished","text":"[Source] Notification that no more body chunks are coming. Delivery of this HTTP message is complete. fun ref finished() : None val","title":"finished"},{"location":"http-HTTPHandler/#returns_2","text":"None val","title":"Returns"},{"location":"http-HTTPHandler/#cancelled","text":"[Source] Notification that transferring the payload has been cancelled locally, e.g. by disposing the client, closing the server or manually cancelling a single request. fun ref cancelled() : None val","title":"cancelled"},{"location":"http-HTTPHandler/#returns_3","text":"None val","title":"Returns"},{"location":"http-HTTPHandler/#failed","text":"[Source] Notification about failure to transfer the payload (e.g. connection could not be established, authentication failed, connection was closed prematurely, ...) fun ref failed( reason: (AuthFailed val | ConnectionClosed val | ConnectFailed val)) : None val","title":"failed"},{"location":"http-HTTPHandler/#parameters_2","text":"reason: ( AuthFailed val | ConnectionClosed val | ConnectFailed val)","title":"Parameters"},{"location":"http-HTTPHandler/#returns_4","text":"None val","title":"Returns"},{"location":"http-HTTPHandler/#throttled","text":"[Source] Notification that the session temporarily can not accept more data. fun ref throttled() : None val","title":"throttled"},{"location":"http-HTTPHandler/#returns_5","text":"None val","title":"Returns"},{"location":"http-HTTPHandler/#unthrottled","text":"[Source] Notification that the session can resume accepting data. fun ref unthrottled() : None val","title":"unthrottled"},{"location":"http-HTTPHandler/#returns_6","text":"None val","title":"Returns"},{"location":"http-HTTPHandler/#need_body","text":"[Source] Notification that the HTTPSession is ready for Stream or Chunked body data. fun ref need_body() : None val","title":"need_body"},{"location":"http-HTTPHandler/#returns_7","text":"None val","title":"Returns"},{"location":"http-HTTPParser/","text":"HTTPParser \u00b6 [Source] This is the HTTP parser that builds a message Payload object representing either a Request or a Response from received chunks of data. class ref HTTPParser Constructors \u00b6 request \u00b6 [Source] Expect HTTP requests to arrive on a session. new ref request( session': HTTPSession tag) : HTTPParser ref^ Parameters \u00b6 session': HTTPSession tag Returns \u00b6 HTTPParser ref^ response \u00b6 [Source] Expect HTTP responses to arrive on a session. new ref response( session': HTTPSession tag) : HTTPParser ref^ Parameters \u00b6 session': HTTPSession tag Returns \u00b6 HTTPParser ref^ Public Functions \u00b6 parse \u00b6 [Source] Analyze new data based on the parser's current internal state. fun ref parse( buffer: Reader ref) : (ParseError val | None val) Parameters \u00b6 buffer: Reader ref Returns \u00b6 ( ParseError val | None val) restart \u00b6 [Source] Restart parser state for the next message. It will be of the same kind as the last one. fun ref restart() : None val Returns \u00b6 None val closed \u00b6 [Source] The connection has closed, which may signal that all remaining data is the payload body. fun ref closed( buffer: Reader ref) : None val Parameters \u00b6 buffer: Reader ref Returns \u00b6 None val","title":"class HTTPParser"},{"location":"http-HTTPParser/#httpparser","text":"[Source] This is the HTTP parser that builds a message Payload object representing either a Request or a Response from received chunks of data. class ref HTTPParser","title":"HTTPParser"},{"location":"http-HTTPParser/#constructors","text":"","title":"Constructors"},{"location":"http-HTTPParser/#request","text":"[Source] Expect HTTP requests to arrive on a session. new ref request( session': HTTPSession tag) : HTTPParser ref^","title":"request"},{"location":"http-HTTPParser/#parameters","text":"session': HTTPSession tag","title":"Parameters"},{"location":"http-HTTPParser/#returns","text":"HTTPParser ref^","title":"Returns"},{"location":"http-HTTPParser/#response","text":"[Source] Expect HTTP responses to arrive on a session. new ref response( session': HTTPSession tag) : HTTPParser ref^","title":"response"},{"location":"http-HTTPParser/#parameters_1","text":"session': HTTPSession tag","title":"Parameters"},{"location":"http-HTTPParser/#returns_1","text":"HTTPParser ref^","title":"Returns"},{"location":"http-HTTPParser/#public-functions","text":"","title":"Public Functions"},{"location":"http-HTTPParser/#parse","text":"[Source] Analyze new data based on the parser's current internal state. fun ref parse( buffer: Reader ref) : (ParseError val | None val)","title":"parse"},{"location":"http-HTTPParser/#parameters_2","text":"buffer: Reader ref","title":"Parameters"},{"location":"http-HTTPParser/#returns_2","text":"( ParseError val | None val)","title":"Returns"},{"location":"http-HTTPParser/#restart","text":"[Source] Restart parser state for the next message. It will be of the same kind as the last one. fun ref restart() : None val","title":"restart"},{"location":"http-HTTPParser/#returns_3","text":"None val","title":"Returns"},{"location":"http-HTTPParser/#closed","text":"[Source] The connection has closed, which may signal that all remaining data is the payload body. fun ref closed( buffer: Reader ref) : None val","title":"closed"},{"location":"http-HTTPParser/#parameters_3","text":"buffer: Reader ref","title":"Parameters"},{"location":"http-HTTPParser/#returns_4","text":"None val","title":"Returns"},{"location":"http-HTTPServer/","text":"HTTPServer \u00b6 [Source] Runs an HTTP server. Server operation \u00b6 Information flow into the Server is as follows: Server listens for incoming TCP connections. RequestBuilder is the notification class for new connections. It creates a ServerConnection actor and receives all the raw data from TCP. It uses the HTTPParser to assemble complete Payload objects which are passed off to the ServerConnection . The ServerConnection actor deals with completely formed requests that have been parsed by the HTTPParser . This is where requests get dispatched to the caller-provided Handler. With streaming content, dispatch to the application's back end Handler has to happen before all of the body has been received. This has to be carefully choreographed because a Payload is an iso object and can only belong to one actor at a time, yet the RequestBuilder is running within the TCPConnection actor while the RequestHandler is running under the ServerConnection actor. Each incoming bufferful of body data, a ByteSeq val , is handed off to ServerConnection , to be passed on to the back end Handler. It turns out that the issues in sending a request and a response are the same, as are the issues in receiving them. Therefore the same notification interface, HTTPHandler is used on both ends, and the same sending interface HTTPSession is used. This makes the code easier to read as well. HTTPHandler.apply() will be the way the client/server is informed of a new response/request message. All of the headers will be present so that the request can be dispatched for correct processing. Subsequent calls to a new function HTTPHandler.chunk will provide the body data, if any. This stream will be terminated by a call to the new function HTTPHandler.finished . Pipelining of requests is to optimize the transmission of requests over slow links (such as over satellites), not to cause simultaneous execution on the server within one session. Multiple received simple requests ( GET , HEAD , and OPTIONS ) are queued in the server and passed to the back end application one at a time. If a client wants true parallel execution of requests, it should use multiple sessions (which many browsers actually do already). Since processing of a streaming response can take a relatively long time, acting on additional requests in the meantime does nothing but use up memory since responses would have to be queued. And if the server is being used to stream media, it is possible that these additional requests will themselves generate large responses. Instead we will just let the requests queue up until a maximum queue length is reached (a small number) at which point we will back-pressure the inbound TCP stream. actor tag HTTPServer Constructors \u00b6 create \u00b6 [Source] Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: ServerNotify iso, handler: HandlerFactory val, logger: Logger val = reference, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, sslctx: (SSLContext val | None val) = reference, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference) : HTTPServer tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: ServerNotify iso handler: HandlerFactory val logger: Logger val = reference host: String val = \"\" service: String val = \"0\" limit: USize val = 0 sslctx: ( SSLContext val | None val) = reference reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference Returns \u00b6 HTTPServer tag^ Public Behaviours \u00b6 register_session \u00b6 [Source] be register_session( conn: TCPConnection tag) Parameters \u00b6 conn: TCPConnection tag unregister_session \u00b6 [Source] be unregister_session( conn: TCPConnection tag) Parameters \u00b6 conn: TCPConnection tag set_handler \u00b6 [Source] Replace the request handler. be set_handler( handler: HandlerFactory val) Parameters \u00b6 handler: HandlerFactory val set_logger \u00b6 [Source] Replace the logger. be set_logger( logger: Logger val) Parameters \u00b6 logger: Logger val dispose \u00b6 [Source] Shut down the server gracefully. To do this we have to eliminate and source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Returns the locally bound address. fun box local_address() : NetAddress val Returns \u00b6 NetAddress val","title":"actor HTTPServer"},{"location":"http-HTTPServer/#httpserver","text":"[Source] Runs an HTTP server.","title":"HTTPServer"},{"location":"http-HTTPServer/#server-operation","text":"Information flow into the Server is as follows: Server listens for incoming TCP connections. RequestBuilder is the notification class for new connections. It creates a ServerConnection actor and receives all the raw data from TCP. It uses the HTTPParser to assemble complete Payload objects which are passed off to the ServerConnection . The ServerConnection actor deals with completely formed requests that have been parsed by the HTTPParser . This is where requests get dispatched to the caller-provided Handler. With streaming content, dispatch to the application's back end Handler has to happen before all of the body has been received. This has to be carefully choreographed because a Payload is an iso object and can only belong to one actor at a time, yet the RequestBuilder is running within the TCPConnection actor while the RequestHandler is running under the ServerConnection actor. Each incoming bufferful of body data, a ByteSeq val , is handed off to ServerConnection , to be passed on to the back end Handler. It turns out that the issues in sending a request and a response are the same, as are the issues in receiving them. Therefore the same notification interface, HTTPHandler is used on both ends, and the same sending interface HTTPSession is used. This makes the code easier to read as well. HTTPHandler.apply() will be the way the client/server is informed of a new response/request message. All of the headers will be present so that the request can be dispatched for correct processing. Subsequent calls to a new function HTTPHandler.chunk will provide the body data, if any. This stream will be terminated by a call to the new function HTTPHandler.finished . Pipelining of requests is to optimize the transmission of requests over slow links (such as over satellites), not to cause simultaneous execution on the server within one session. Multiple received simple requests ( GET , HEAD , and OPTIONS ) are queued in the server and passed to the back end application one at a time. If a client wants true parallel execution of requests, it should use multiple sessions (which many browsers actually do already). Since processing of a streaming response can take a relatively long time, acting on additional requests in the meantime does nothing but use up memory since responses would have to be queued. And if the server is being used to stream media, it is possible that these additional requests will themselves generate large responses. Instead we will just let the requests queue up until a maximum queue length is reached (a small number) at which point we will back-pressure the inbound TCP stream. actor tag HTTPServer","title":"Server operation"},{"location":"http-HTTPServer/#constructors","text":"","title":"Constructors"},{"location":"http-HTTPServer/#create","text":"[Source] Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: ServerNotify iso, handler: HandlerFactory val, logger: Logger val = reference, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, sslctx: (SSLContext val | None val) = reference, reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference) : HTTPServer tag^","title":"create"},{"location":"http-HTTPServer/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: ServerNotify iso handler: HandlerFactory val logger: Logger val = reference host: String val = \"\" service: String val = \"0\" limit: USize val = 0 sslctx: ( SSLContext val | None val) = reference reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference","title":"Parameters"},{"location":"http-HTTPServer/#returns","text":"HTTPServer tag^","title":"Returns"},{"location":"http-HTTPServer/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"http-HTTPServer/#register_session","text":"[Source] be register_session( conn: TCPConnection tag)","title":"register_session"},{"location":"http-HTTPServer/#parameters_1","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"http-HTTPServer/#unregister_session","text":"[Source] be unregister_session( conn: TCPConnection tag)","title":"unregister_session"},{"location":"http-HTTPServer/#parameters_2","text":"conn: TCPConnection tag","title":"Parameters"},{"location":"http-HTTPServer/#set_handler","text":"[Source] Replace the request handler. be set_handler( handler: HandlerFactory val)","title":"set_handler"},{"location":"http-HTTPServer/#parameters_3","text":"handler: HandlerFactory val","title":"Parameters"},{"location":"http-HTTPServer/#set_logger","text":"[Source] Replace the logger. be set_logger( logger: Logger val)","title":"set_logger"},{"location":"http-HTTPServer/#parameters_4","text":"logger: Logger val","title":"Parameters"},{"location":"http-HTTPServer/#dispose","text":"[Source] Shut down the server gracefully. To do this we have to eliminate and source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. be dispose()","title":"dispose"},{"location":"http-HTTPServer/#public-functions","text":"","title":"Public Functions"},{"location":"http-HTTPServer/#local_address","text":"[Source] Returns the locally bound address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"http-HTTPServer/#returns_1","text":"NetAddress val","title":"Returns"},{"location":"http-HTTPSession/","text":"HTTPSession \u00b6 [Source] An HTTP Session is the external API to the communication link between client and server. A session can only transfer one message at a time in each direction. The client and server each have their own ways of implementing this interface, but to application code (either in the client or in the server 'back end') this interface provides a common view of how information is passed into the http package. interface tag HTTPSession Public Behaviours \u00b6 apply \u00b6 [Source] Start sending a request or response. The Payload must have all its essential fields filled in at this point, because ownership is being transferred to the session actor. This begins an outbound message. be apply( payload: Payload val) Parameters \u00b6 payload: Payload val finish \u00b6 [Source] Indicate that all outbound add_chunk calls have been made and submission of the HTTP message is complete. be finish() dispose \u00b6 [Source] Close the connection from this end. be dispose() write \u00b6 [Source] Write raw byte stream to the outbound TCP connection. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) cancel \u00b6 [Source] Tell the session to stop sending an outbound message. be cancel( msg: Payload val) Parameters \u00b6 msg: Payload val","title":"interface HTTPSession"},{"location":"http-HTTPSession/#httpsession","text":"[Source] An HTTP Session is the external API to the communication link between client and server. A session can only transfer one message at a time in each direction. The client and server each have their own ways of implementing this interface, but to application code (either in the client or in the server 'back end') this interface provides a common view of how information is passed into the http package. interface tag HTTPSession","title":"HTTPSession"},{"location":"http-HTTPSession/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"http-HTTPSession/#apply","text":"[Source] Start sending a request or response. The Payload must have all its essential fields filled in at this point, because ownership is being transferred to the session actor. This begins an outbound message. be apply( payload: Payload val)","title":"apply"},{"location":"http-HTTPSession/#parameters","text":"payload: Payload val","title":"Parameters"},{"location":"http-HTTPSession/#finish","text":"[Source] Indicate that all outbound add_chunk calls have been made and submission of the HTTP message is complete. be finish()","title":"finish"},{"location":"http-HTTPSession/#dispose","text":"[Source] Close the connection from this end. be dispose()","title":"dispose"},{"location":"http-HTTPSession/#write","text":"[Source] Write raw byte stream to the outbound TCP connection. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"http-HTTPSession/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"http-HTTPSession/#cancel","text":"[Source] Tell the session to stop sending an outbound message. be cancel( msg: Payload val)","title":"cancel"},{"location":"http-HTTPSession/#parameters_2","text":"msg: Payload val","title":"Parameters"},{"location":"http-HandlerFactory/","text":"HandlerFactory \u00b6 [Source] The TCP connections that underlie HTTP sessions get created within the http package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a class that implements this interface. The HandlerFactory.apply method will be called when a new HTTPSession is created, giving the application a chance to create an instance of its own HTTPHandler . This happens on both client and server ends. interface ref HandlerFactory Public Functions \u00b6 apply \u00b6 [Source] Called by the HTTPSession when it needs a new instance of the application's HTTPHandler . It is suggested that the session value be passed to the constructor for the new HTTPHandler so that it is available for making throttle and unthrottle calls. fun box apply( session: HTTPSession tag) : HTTPHandler ref^ Parameters \u00b6 session: HTTPSession tag Returns \u00b6 HTTPHandler ref^","title":"interface HandlerFactory"},{"location":"http-HandlerFactory/#handlerfactory","text":"[Source] The TCP connections that underlie HTTP sessions get created within the http package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a class that implements this interface. The HandlerFactory.apply method will be called when a new HTTPSession is created, giving the application a chance to create an instance of its own HTTPHandler . This happens on both client and server ends. interface ref HandlerFactory","title":"HandlerFactory"},{"location":"http-HandlerFactory/#public-functions","text":"","title":"Public Functions"},{"location":"http-HandlerFactory/#apply","text":"[Source] Called by the HTTPSession when it needs a new instance of the application's HTTPHandler . It is suggested that the session value be passed to the constructor for the new HTTPHandler so that it is available for making throttle and unthrottle calls. fun box apply( session: HTTPSession tag) : HTTPHandler ref^","title":"apply"},{"location":"http-HandlerFactory/#parameters","text":"session: HTTPSession tag","title":"Parameters"},{"location":"http-HandlerFactory/#returns","text":"HTTPHandler ref^","title":"Returns"},{"location":"http-Logger/","text":"Logger \u00b6 [Source] Handles logging request/response pairs. interface val Logger Public Functions \u00b6 apply \u00b6 [Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : Any tag Parameters \u00b6 ip: String val body_size: USize val request: Payload val response: Payload val Returns \u00b6 Any tag","title":"interface Logger"},{"location":"http-Logger/#logger","text":"[Source] Handles logging request/response pairs. interface val Logger","title":"Logger"},{"location":"http-Logger/#public-functions","text":"","title":"Public Functions"},{"location":"http-Logger/#apply","text":"[Source] fun val apply( ip: String val, body_size: USize val, request: Payload val, response: Payload val) : Any tag","title":"apply"},{"location":"http-Logger/#parameters","text":"ip: String val body_size: USize val request: Payload val response: Payload val","title":"Parameters"},{"location":"http-Logger/#returns","text":"Any tag","title":"Returns"},{"location":"http-MimeTypes/","text":"MimeTypes \u00b6 [Source] Provide mapping from file names to MIME types. TODO load from /etc/mime.types primitive val MimeTypes Constructors \u00b6 create \u00b6 [Source] new val create() : MimeTypes val^ Returns \u00b6 MimeTypes val^ Public Functions \u00b6 apply \u00b6 [Source] Mapping is based on the file type, following the last period in the name. fun box apply( name: String val) : String val^ Parameters \u00b6 name: String val Returns \u00b6 String val^ eq \u00b6 [Source] fun box eq( that: MimeTypes val) : Bool val Parameters \u00b6 that: MimeTypes val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MimeTypes val) : Bool val Parameters \u00b6 that: MimeTypes val Returns \u00b6 Bool val","title":"primitive MimeTypes"},{"location":"http-MimeTypes/#mimetypes","text":"[Source] Provide mapping from file names to MIME types. TODO load from /etc/mime.types primitive val MimeTypes","title":"MimeTypes"},{"location":"http-MimeTypes/#constructors","text":"","title":"Constructors"},{"location":"http-MimeTypes/#create","text":"[Source] new val create() : MimeTypes val^","title":"create"},{"location":"http-MimeTypes/#returns","text":"MimeTypes val^","title":"Returns"},{"location":"http-MimeTypes/#public-functions","text":"","title":"Public Functions"},{"location":"http-MimeTypes/#apply","text":"[Source] Mapping is based on the file type, following the last period in the name. fun box apply( name: String val) : String val^","title":"apply"},{"location":"http-MimeTypes/#parameters","text":"name: String val","title":"Parameters"},{"location":"http-MimeTypes/#returns_1","text":"String val^","title":"Returns"},{"location":"http-MimeTypes/#eq","text":"[Source] fun box eq( that: MimeTypes val) : Bool val","title":"eq"},{"location":"http-MimeTypes/#parameters_1","text":"that: MimeTypes val","title":"Parameters"},{"location":"http-MimeTypes/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-MimeTypes/#ne","text":"[Source] fun box ne( that: MimeTypes val) : Bool val","title":"ne"},{"location":"http-MimeTypes/#parameters_2","text":"that: MimeTypes val","title":"Parameters"},{"location":"http-MimeTypes/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-OneshotTransfer/","text":"OneshotTransfer \u00b6 [Source] primitive val OneshotTransfer Constructors \u00b6 create \u00b6 [Source] new val create() : OneshotTransfer val^ Returns \u00b6 OneshotTransfer val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: OneshotTransfer val) : Bool val Parameters \u00b6 that: OneshotTransfer val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: OneshotTransfer val) : Bool val Parameters \u00b6 that: OneshotTransfer val Returns \u00b6 Bool val","title":"primitive OneshotTransfer"},{"location":"http-OneshotTransfer/#oneshottransfer","text":"[Source] primitive val OneshotTransfer","title":"OneshotTransfer"},{"location":"http-OneshotTransfer/#constructors","text":"","title":"Constructors"},{"location":"http-OneshotTransfer/#create","text":"[Source] new val create() : OneshotTransfer val^","title":"create"},{"location":"http-OneshotTransfer/#returns","text":"OneshotTransfer val^","title":"Returns"},{"location":"http-OneshotTransfer/#public-functions","text":"","title":"Public Functions"},{"location":"http-OneshotTransfer/#eq","text":"[Source] fun box eq( that: OneshotTransfer val) : Bool val","title":"eq"},{"location":"http-OneshotTransfer/#parameters","text":"that: OneshotTransfer val","title":"Parameters"},{"location":"http-OneshotTransfer/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-OneshotTransfer/#ne","text":"[Source] fun box ne( that: OneshotTransfer val) : Bool val","title":"ne"},{"location":"http-OneshotTransfer/#parameters_1","text":"that: OneshotTransfer val","title":"Parameters"},{"location":"http-OneshotTransfer/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-ParseError/","text":"ParseError \u00b6 [Source] primitive val ParseError Constructors \u00b6 create \u00b6 [Source] new val create() : ParseError val^ Returns \u00b6 ParseError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ParseError val) : Bool val Parameters \u00b6 that: ParseError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ParseError val) : Bool val Parameters \u00b6 that: ParseError val Returns \u00b6 Bool val","title":"primitive ParseError"},{"location":"http-ParseError/#parseerror","text":"[Source] primitive val ParseError","title":"ParseError"},{"location":"http-ParseError/#constructors","text":"","title":"Constructors"},{"location":"http-ParseError/#create","text":"[Source] new val create() : ParseError val^","title":"create"},{"location":"http-ParseError/#returns","text":"ParseError val^","title":"Returns"},{"location":"http-ParseError/#public-functions","text":"","title":"Public Functions"},{"location":"http-ParseError/#eq","text":"[Source] fun box eq( that: ParseError val) : Bool val","title":"eq"},{"location":"http-ParseError/#parameters","text":"that: ParseError val","title":"Parameters"},{"location":"http-ParseError/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-ParseError/#ne","text":"[Source] fun box ne( that: ParseError val) : Bool val","title":"ne"},{"location":"http-ParseError/#parameters_1","text":"that: ParseError val","title":"Parameters"},{"location":"http-ParseError/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-Payload/","text":"Payload \u00b6 [Source] This class represent a single HTTP message, which can be either a request or a response . Transfer Modes \u00b6 HTTP provides two ways to encode the transmission of a message 'body', of any size. This package supports both of them: StreamTransfer . This is used for payload bodies where the exact length is known in advance, including most transfers of files. It is selected by calling Payload.set_length with an integer bytecount. Appication buffer sizes determine how much data is fed to the TCP connection at once, but the total amount must match this size. ChunkedTransfer . This is used when the payload length can not be known in advance, but can be large. It is selected by calling Payload.set_length with a parameter of None . On the TCP link this mode can be detected because there is no Content-Length header at all, being replaced by the Transfer-Encoding: chunked header. In addition, the message body is separated into chunks, each with its own bytecount. As with StreamTransfer mode, transmission can be spread out over time with the difference that it is the original data source that determines the chunk size. If Payload.set_length is never called at all, a variation on StreamTransfer called OneshotTransfer is used. In this case, all of the message body is placed into the message at once, using Payload.add_chunk calls. The size will be determined when the message is submitted for transmission. Care must be taken not to consume too much memory, especially on a server where there can be multiple messages in transit at once. The type of transfer being used by an incoming message can be determined from its transfer_mode field, which will be one of the TransferMode types. Sequence \u00b6 For example, to send a message of possibly large size: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Call Payload.set_length to indicate the length of the body. Add any additional headers that may be required, such as Content-type . Submit the message for transmission by calling the either the HTTPSession.apply method (in servers) or the HTTPCLient.apply method in clients. Wait for the send_body notification. Make any number of calls to Payload.send_chunk . Call Payload.finish . To send a message of small, reasonable size (say, under 20KB), this simplified method can be used instead: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Add any additional headers that may be required, such as Content-type . Call add_chunk one or more times to add body data. Submit the message for transmission by calling the either the HTTPSession .apply method (in servers) or the HTTPClient .apply method in clients. class trn Payload Constructors \u00b6 request \u00b6 [Source] Create an HTTP request message. new iso request( method': String val = \"GET\", url': URL val = reference) : Payload iso^ Parameters \u00b6 method': String val = \"GET\" url': URL val = reference Returns \u00b6 Payload iso^ response \u00b6 [Source] Create an HTTP response message. new iso response( status': Status val = reference) : Payload iso^ Parameters \u00b6 status': Status val = reference Returns \u00b6 Payload iso^ Public fields \u00b6 var proto: String val \u00b6 [Source] The HTTP protocol string var status: U16 val \u00b6 [Source] Internal representation of the response Status . Will be 0 for HTTP requests. var method: String val \u00b6 [Source] The HTTP Method. GET , POST , DELETE , OPTIONS , ... For HTTP responses this will be the status string, for a 200 status this will be 200 OK , for 404 , 404 Not Found etc.. var url: URL val \u00b6 [Source] The HTTP request URL . It will be used for the HTTP path and the Host header. The user and password fields are ignored. For HTTP responses this will be an empty URL . var transfer_mode: ( ChunkedTransfer val | StreamTransfer val | OneshotTransfer val) \u00b6 [Source] Determines the transfer mode of this message. In case of outgoing requests or responses, use set_length to control the transfer mode. In case of incoming requests, this field determines how the request is transferred. var session: ( HTTPSession tag | None val) \u00b6 [Source] var username: String val \u00b6 [Source] The username extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead. var password: String val \u00b6 [Source] The password extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead. Public Functions \u00b6 apply \u00b6 [Source] Get a header. fun box apply( key: String val) : String val ? Parameters \u00b6 key: String val Returns \u00b6 String val ? is_safe \u00b6 [Source] A request method is \"safe\" if it does not modify state in the resource. These methods can be guaranteed not to have any body data. Return true for a safe request method, false otherwise. fun box is_safe() : Bool val Returns \u00b6 Bool val body \u00b6 [Source] Get the body in OneshotTransfer mode. In the other modes it raises an error. fun box body() : this->Array[(String val | Array[U8 val] val)] ref ? Returns \u00b6 this-> Array [( String val | Array [ U8 val] val)] ref ? set_length \u00b6 [Source] Set the body length when known in advance. This determines the transfer mode that will be used. A parameter of 'None' will use Chunked Transfer Encoding. A numeric value will use Streamed transfer. Not calling this function at all will use Oneshot transfer. fun ref set_length( bytecount: (USize val | None val)) : None val Parameters \u00b6 bytecount: ( USize val | None val) Returns \u00b6 None val update \u00b6 [Source] Set any header. If we've already received the header, append the value as a comma separated list, as per RFC 2616 section 4.2. fun ref update( key: String val, value: String val) : Payload ref^ Parameters \u00b6 key: String val value: String val Returns \u00b6 Payload ref^ headers \u00b6 [Source] Get all the headers. fun box headers() : this->HashMap[String val, String val, HashEq[String val] val] ref Returns \u00b6 this-> HashMap [ String val, String val, HashEq [ String val] val] ref body_size \u00b6 [Source] Get the total intended size of the body. ServerConnection accumulates actual size transferred for logging. fun box body_size() : (USize val | None val) Returns \u00b6 ( USize val | None val) add_chunk \u00b6 [Source] This is how application code adds data to the body in OneshotTransfer mode. For large bodies, call set_length and use send_chunk instead. fun ref add_chunk( data: (String val | Array[U8 val] val)) : Payload ref^ Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 Payload ref^ send_chunk \u00b6 [Source] This is how application code sends body data in StreamTransfer and ChunkedTransfer modes. For smaller body lengths, add_chunk in Oneshot mode can be used instead. fun box send_chunk( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val finish \u00b6 [Source] Mark the end of body transmission. This does not do anything, and is unnecessary, in Oneshot mode. fun val finish() : None val Returns \u00b6 None val respond \u00b6 [Source] Start sending a response from the server to the client. fun val respond( response': Payload trn) : None val Parameters \u00b6 response': Payload trn Returns \u00b6 None val has_body \u00b6 [Source] Determines whether a message has a body portion. fun box has_body() : Bool val Returns \u00b6 Bool val","title":"class Payload"},{"location":"http-Payload/#payload","text":"[Source] This class represent a single HTTP message, which can be either a request or a response .","title":"Payload"},{"location":"http-Payload/#transfer-modes","text":"HTTP provides two ways to encode the transmission of a message 'body', of any size. This package supports both of them: StreamTransfer . This is used for payload bodies where the exact length is known in advance, including most transfers of files. It is selected by calling Payload.set_length with an integer bytecount. Appication buffer sizes determine how much data is fed to the TCP connection at once, but the total amount must match this size. ChunkedTransfer . This is used when the payload length can not be known in advance, but can be large. It is selected by calling Payload.set_length with a parameter of None . On the TCP link this mode can be detected because there is no Content-Length header at all, being replaced by the Transfer-Encoding: chunked header. In addition, the message body is separated into chunks, each with its own bytecount. As with StreamTransfer mode, transmission can be spread out over time with the difference that it is the original data source that determines the chunk size. If Payload.set_length is never called at all, a variation on StreamTransfer called OneshotTransfer is used. In this case, all of the message body is placed into the message at once, using Payload.add_chunk calls. The size will be determined when the message is submitted for transmission. Care must be taken not to consume too much memory, especially on a server where there can be multiple messages in transit at once. The type of transfer being used by an incoming message can be determined from its transfer_mode field, which will be one of the TransferMode types.","title":"Transfer Modes"},{"location":"http-Payload/#sequence","text":"For example, to send a message of possibly large size: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Call Payload.set_length to indicate the length of the body. Add any additional headers that may be required, such as Content-type . Submit the message for transmission by calling the either the HTTPSession.apply method (in servers) or the HTTPCLient.apply method in clients. Wait for the send_body notification. Make any number of calls to Payload.send_chunk . Call Payload.finish . To send a message of small, reasonable size (say, under 20KB), this simplified method can be used instead: Create the message with a call to Payload.request or Payload.response . Set the session field of the message. Add any additional headers that may be required, such as Content-type . Call add_chunk one or more times to add body data. Submit the message for transmission by calling the either the HTTPSession .apply method (in servers) or the HTTPClient .apply method in clients. class trn Payload","title":"Sequence"},{"location":"http-Payload/#constructors","text":"","title":"Constructors"},{"location":"http-Payload/#request","text":"[Source] Create an HTTP request message. new iso request( method': String val = \"GET\", url': URL val = reference) : Payload iso^","title":"request"},{"location":"http-Payload/#parameters","text":"method': String val = \"GET\" url': URL val = reference","title":"Parameters"},{"location":"http-Payload/#returns","text":"Payload iso^","title":"Returns"},{"location":"http-Payload/#response","text":"[Source] Create an HTTP response message. new iso response( status': Status val = reference) : Payload iso^","title":"response"},{"location":"http-Payload/#parameters_1","text":"status': Status val = reference","title":"Parameters"},{"location":"http-Payload/#returns_1","text":"Payload iso^","title":"Returns"},{"location":"http-Payload/#public-fields","text":"","title":"Public fields"},{"location":"http-Payload/#var-proto-string-val","text":"[Source] The HTTP protocol string","title":"var proto: String val"},{"location":"http-Payload/#var-status-u16-val","text":"[Source] Internal representation of the response Status . Will be 0 for HTTP requests.","title":"var status: U16 val"},{"location":"http-Payload/#var-method-string-val","text":"[Source] The HTTP Method. GET , POST , DELETE , OPTIONS , ... For HTTP responses this will be the status string, for a 200 status this will be 200 OK , for 404 , 404 Not Found etc..","title":"var method: String val"},{"location":"http-Payload/#var-url-url-val","text":"[Source] The HTTP request URL . It will be used for the HTTP path and the Host header. The user and password fields are ignored. For HTTP responses this will be an empty URL .","title":"var url: URL val"},{"location":"http-Payload/#var-transfer_mode-chunkedtransfer-val-streamtransfer-val-oneshottransfer-val","text":"[Source] Determines the transfer mode of this message. In case of outgoing requests or responses, use set_length to control the transfer mode. In case of incoming requests, this field determines how the request is transferred.","title":"var transfer_mode: (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)"},{"location":"http-Payload/#var-session-httpsession-tag-none-val","text":"[Source]","title":"var session: (HTTPSession tag | None val)"},{"location":"http-Payload/#var-username-string-val","text":"[Source] The username extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead.","title":"var username: String val"},{"location":"http-Payload/#var-password-string-val","text":"[Source] The password extracted from an Authentication header of an HTTP request received via HTTPServer . This is not used and not sent using HTTPClient , use update to set an Authentication header instead.","title":"var password: String val"},{"location":"http-Payload/#public-functions","text":"","title":"Public Functions"},{"location":"http-Payload/#apply","text":"[Source] Get a header. fun box apply( key: String val) : String val ?","title":"apply"},{"location":"http-Payload/#parameters_2","text":"key: String val","title":"Parameters"},{"location":"http-Payload/#returns_2","text":"String val ?","title":"Returns"},{"location":"http-Payload/#is_safe","text":"[Source] A request method is \"safe\" if it does not modify state in the resource. These methods can be guaranteed not to have any body data. Return true for a safe request method, false otherwise. fun box is_safe() : Bool val","title":"is_safe"},{"location":"http-Payload/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-Payload/#body","text":"[Source] Get the body in OneshotTransfer mode. In the other modes it raises an error. fun box body() : this->Array[(String val | Array[U8 val] val)] ref ?","title":"body"},{"location":"http-Payload/#returns_4","text":"this-> Array [( String val | Array [ U8 val] val)] ref ?","title":"Returns"},{"location":"http-Payload/#set_length","text":"[Source] Set the body length when known in advance. This determines the transfer mode that will be used. A parameter of 'None' will use Chunked Transfer Encoding. A numeric value will use Streamed transfer. Not calling this function at all will use Oneshot transfer. fun ref set_length( bytecount: (USize val | None val)) : None val","title":"set_length"},{"location":"http-Payload/#parameters_3","text":"bytecount: ( USize val | None val)","title":"Parameters"},{"location":"http-Payload/#returns_5","text":"None val","title":"Returns"},{"location":"http-Payload/#update","text":"[Source] Set any header. If we've already received the header, append the value as a comma separated list, as per RFC 2616 section 4.2. fun ref update( key: String val, value: String val) : Payload ref^","title":"update"},{"location":"http-Payload/#parameters_4","text":"key: String val value: String val","title":"Parameters"},{"location":"http-Payload/#returns_6","text":"Payload ref^","title":"Returns"},{"location":"http-Payload/#headers","text":"[Source] Get all the headers. fun box headers() : this->HashMap[String val, String val, HashEq[String val] val] ref","title":"headers"},{"location":"http-Payload/#returns_7","text":"this-> HashMap [ String val, String val, HashEq [ String val] val] ref","title":"Returns"},{"location":"http-Payload/#body_size","text":"[Source] Get the total intended size of the body. ServerConnection accumulates actual size transferred for logging. fun box body_size() : (USize val | None val)","title":"body_size"},{"location":"http-Payload/#returns_8","text":"( USize val | None val)","title":"Returns"},{"location":"http-Payload/#add_chunk","text":"[Source] This is how application code adds data to the body in OneshotTransfer mode. For large bodies, call set_length and use send_chunk instead. fun ref add_chunk( data: (String val | Array[U8 val] val)) : Payload ref^","title":"add_chunk"},{"location":"http-Payload/#parameters_5","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"http-Payload/#returns_9","text":"Payload ref^","title":"Returns"},{"location":"http-Payload/#send_chunk","text":"[Source] This is how application code sends body data in StreamTransfer and ChunkedTransfer modes. For smaller body lengths, add_chunk in Oneshot mode can be used instead. fun box send_chunk( data: (String val | Array[U8 val] val)) : None val","title":"send_chunk"},{"location":"http-Payload/#parameters_6","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"http-Payload/#returns_10","text":"None val","title":"Returns"},{"location":"http-Payload/#finish","text":"[Source] Mark the end of body transmission. This does not do anything, and is unnecessary, in Oneshot mode. fun val finish() : None val","title":"finish"},{"location":"http-Payload/#returns_11","text":"None val","title":"Returns"},{"location":"http-Payload/#respond","text":"[Source] Start sending a response from the server to the client. fun val respond( response': Payload trn) : None val","title":"respond"},{"location":"http-Payload/#parameters_7","text":"response': Payload trn","title":"Parameters"},{"location":"http-Payload/#returns_12","text":"None val","title":"Returns"},{"location":"http-Payload/#has_body","text":"[Source] Determines whether a message has a body portion. fun box has_body() : Bool val","title":"has_body"},{"location":"http-Payload/#returns_13","text":"Bool val","title":"Returns"},{"location":"http-ServerNotify/","text":"ServerNotify \u00b6 [Source] Notifications about the creation and closing of TCPConnection s within HTTP servers. interface ref ServerNotify Public Functions \u00b6 listening \u00b6 [Source] Called when we are listening. fun ref listening( server: HTTPServer ref) : None val Parameters \u00b6 server: HTTPServer ref Returns \u00b6 None val not_listening \u00b6 [Source] Called when we fail to listen. fun ref not_listening( server: HTTPServer ref) : None val Parameters \u00b6 server: HTTPServer ref Returns \u00b6 None val closed \u00b6 [Source] Called when we stop listening. fun ref closed( server: HTTPServer ref) : None val Parameters \u00b6 server: HTTPServer ref Returns \u00b6 None val","title":"interface ServerNotify"},{"location":"http-ServerNotify/#servernotify","text":"[Source] Notifications about the creation and closing of TCPConnection s within HTTP servers. interface ref ServerNotify","title":"ServerNotify"},{"location":"http-ServerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"http-ServerNotify/#listening","text":"[Source] Called when we are listening. fun ref listening( server: HTTPServer ref) : None val","title":"listening"},{"location":"http-ServerNotify/#parameters","text":"server: HTTPServer ref","title":"Parameters"},{"location":"http-ServerNotify/#returns","text":"None val","title":"Returns"},{"location":"http-ServerNotify/#not_listening","text":"[Source] Called when we fail to listen. fun ref not_listening( server: HTTPServer ref) : None val","title":"not_listening"},{"location":"http-ServerNotify/#parameters_1","text":"server: HTTPServer ref","title":"Parameters"},{"location":"http-ServerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"http-ServerNotify/#closed","text":"[Source] Called when we stop listening. fun ref closed( server: HTTPServer ref) : None val","title":"closed"},{"location":"http-ServerNotify/#parameters_2","text":"server: HTTPServer ref","title":"Parameters"},{"location":"http-ServerNotify/#returns_2","text":"None val","title":"Returns"},{"location":"http-Status/","text":"Status \u00b6 [Source] trait val Status Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val","title":"trait Status"},{"location":"http-Status/#status","text":"[Source] trait val Status","title":"Status"},{"location":"http-Status/#public-functions","text":"","title":"Public Functions"},{"location":"http-Status/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-Status/#returns","text":"U16 val","title":"Returns"},{"location":"http-Status/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-Status/#returns_1","text":"String val","title":"Returns"},{"location":"http-StatusAccepted/","text":"StatusAccepted \u00b6 [Source] primitive val StatusAccepted is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusAccepted val^ Returns \u00b6 StatusAccepted val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusAccepted val) : Bool val Parameters \u00b6 that: StatusAccepted val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusAccepted val) : Bool val Parameters \u00b6 that: StatusAccepted val Returns \u00b6 Bool val","title":"primitive StatusAccepted"},{"location":"http-StatusAccepted/#statusaccepted","text":"[Source] primitive val StatusAccepted is Status val","title":"StatusAccepted"},{"location":"http-StatusAccepted/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusAccepted/#constructors","text":"","title":"Constructors"},{"location":"http-StatusAccepted/#create","text":"[Source] new val create() : StatusAccepted val^","title":"create"},{"location":"http-StatusAccepted/#returns","text":"StatusAccepted val^","title":"Returns"},{"location":"http-StatusAccepted/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusAccepted/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusAccepted/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusAccepted/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusAccepted/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusAccepted/#eq","text":"[Source] fun box eq( that: StatusAccepted val) : Bool val","title":"eq"},{"location":"http-StatusAccepted/#parameters","text":"that: StatusAccepted val","title":"Parameters"},{"location":"http-StatusAccepted/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusAccepted/#ne","text":"[Source] fun box ne( that: StatusAccepted val) : Bool val","title":"ne"},{"location":"http-StatusAccepted/#parameters_1","text":"that: StatusAccepted val","title":"Parameters"},{"location":"http-StatusAccepted/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusBadGateway/","text":"StatusBadGateway \u00b6 [Source] primitive val StatusBadGateway is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusBadGateway val^ Returns \u00b6 StatusBadGateway val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusBadGateway val) : Bool val Parameters \u00b6 that: StatusBadGateway val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusBadGateway val) : Bool val Parameters \u00b6 that: StatusBadGateway val Returns \u00b6 Bool val","title":"primitive StatusBadGateway"},{"location":"http-StatusBadGateway/#statusbadgateway","text":"[Source] primitive val StatusBadGateway is Status val","title":"StatusBadGateway"},{"location":"http-StatusBadGateway/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusBadGateway/#constructors","text":"","title":"Constructors"},{"location":"http-StatusBadGateway/#create","text":"[Source] new val create() : StatusBadGateway val^","title":"create"},{"location":"http-StatusBadGateway/#returns","text":"StatusBadGateway val^","title":"Returns"},{"location":"http-StatusBadGateway/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusBadGateway/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusBadGateway/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusBadGateway/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusBadGateway/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusBadGateway/#eq","text":"[Source] fun box eq( that: StatusBadGateway val) : Bool val","title":"eq"},{"location":"http-StatusBadGateway/#parameters","text":"that: StatusBadGateway val","title":"Parameters"},{"location":"http-StatusBadGateway/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusBadGateway/#ne","text":"[Source] fun box ne( that: StatusBadGateway val) : Bool val","title":"ne"},{"location":"http-StatusBadGateway/#parameters_1","text":"that: StatusBadGateway val","title":"Parameters"},{"location":"http-StatusBadGateway/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusBadRequest/","text":"StatusBadRequest \u00b6 [Source] primitive val StatusBadRequest is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusBadRequest val^ Returns \u00b6 StatusBadRequest val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusBadRequest val) : Bool val Parameters \u00b6 that: StatusBadRequest val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusBadRequest val) : Bool val Parameters \u00b6 that: StatusBadRequest val Returns \u00b6 Bool val","title":"primitive StatusBadRequest"},{"location":"http-StatusBadRequest/#statusbadrequest","text":"[Source] primitive val StatusBadRequest is Status val","title":"StatusBadRequest"},{"location":"http-StatusBadRequest/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusBadRequest/#constructors","text":"","title":"Constructors"},{"location":"http-StatusBadRequest/#create","text":"[Source] new val create() : StatusBadRequest val^","title":"create"},{"location":"http-StatusBadRequest/#returns","text":"StatusBadRequest val^","title":"Returns"},{"location":"http-StatusBadRequest/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusBadRequest/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusBadRequest/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusBadRequest/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusBadRequest/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusBadRequest/#eq","text":"[Source] fun box eq( that: StatusBadRequest val) : Bool val","title":"eq"},{"location":"http-StatusBadRequest/#parameters","text":"that: StatusBadRequest val","title":"Parameters"},{"location":"http-StatusBadRequest/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusBadRequest/#ne","text":"[Source] fun box ne( that: StatusBadRequest val) : Bool val","title":"ne"},{"location":"http-StatusBadRequest/#parameters_1","text":"that: StatusBadRequest val","title":"Parameters"},{"location":"http-StatusBadRequest/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusConflict/","text":"StatusConflict \u00b6 [Source] primitive val StatusConflict is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusConflict val^ Returns \u00b6 StatusConflict val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusConflict val) : Bool val Parameters \u00b6 that: StatusConflict val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusConflict val) : Bool val Parameters \u00b6 that: StatusConflict val Returns \u00b6 Bool val","title":"primitive StatusConflict"},{"location":"http-StatusConflict/#statusconflict","text":"[Source] primitive val StatusConflict is Status val","title":"StatusConflict"},{"location":"http-StatusConflict/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusConflict/#constructors","text":"","title":"Constructors"},{"location":"http-StatusConflict/#create","text":"[Source] new val create() : StatusConflict val^","title":"create"},{"location":"http-StatusConflict/#returns","text":"StatusConflict val^","title":"Returns"},{"location":"http-StatusConflict/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusConflict/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusConflict/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusConflict/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusConflict/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusConflict/#eq","text":"[Source] fun box eq( that: StatusConflict val) : Bool val","title":"eq"},{"location":"http-StatusConflict/#parameters","text":"that: StatusConflict val","title":"Parameters"},{"location":"http-StatusConflict/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusConflict/#ne","text":"[Source] fun box ne( that: StatusConflict val) : Bool val","title":"ne"},{"location":"http-StatusConflict/#parameters_1","text":"that: StatusConflict val","title":"Parameters"},{"location":"http-StatusConflict/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusContinue/","text":"StatusContinue \u00b6 [Source] primitive val StatusContinue is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusContinue val^ Returns \u00b6 StatusContinue val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusContinue val) : Bool val Parameters \u00b6 that: StatusContinue val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusContinue val) : Bool val Parameters \u00b6 that: StatusContinue val Returns \u00b6 Bool val","title":"primitive StatusContinue"},{"location":"http-StatusContinue/#statuscontinue","text":"[Source] primitive val StatusContinue is Status val","title":"StatusContinue"},{"location":"http-StatusContinue/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusContinue/#constructors","text":"","title":"Constructors"},{"location":"http-StatusContinue/#create","text":"[Source] new val create() : StatusContinue val^","title":"create"},{"location":"http-StatusContinue/#returns","text":"StatusContinue val^","title":"Returns"},{"location":"http-StatusContinue/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusContinue/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusContinue/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusContinue/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusContinue/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusContinue/#eq","text":"[Source] fun box eq( that: StatusContinue val) : Bool val","title":"eq"},{"location":"http-StatusContinue/#parameters","text":"that: StatusContinue val","title":"Parameters"},{"location":"http-StatusContinue/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusContinue/#ne","text":"[Source] fun box ne( that: StatusContinue val) : Bool val","title":"ne"},{"location":"http-StatusContinue/#parameters_1","text":"that: StatusContinue val","title":"Parameters"},{"location":"http-StatusContinue/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusCreated/","text":"StatusCreated \u00b6 [Source] primitive val StatusCreated is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusCreated val^ Returns \u00b6 StatusCreated val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusCreated val) : Bool val Parameters \u00b6 that: StatusCreated val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusCreated val) : Bool val Parameters \u00b6 that: StatusCreated val Returns \u00b6 Bool val","title":"primitive StatusCreated"},{"location":"http-StatusCreated/#statuscreated","text":"[Source] primitive val StatusCreated is Status val","title":"StatusCreated"},{"location":"http-StatusCreated/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusCreated/#constructors","text":"","title":"Constructors"},{"location":"http-StatusCreated/#create","text":"[Source] new val create() : StatusCreated val^","title":"create"},{"location":"http-StatusCreated/#returns","text":"StatusCreated val^","title":"Returns"},{"location":"http-StatusCreated/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusCreated/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusCreated/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusCreated/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusCreated/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusCreated/#eq","text":"[Source] fun box eq( that: StatusCreated val) : Bool val","title":"eq"},{"location":"http-StatusCreated/#parameters","text":"that: StatusCreated val","title":"Parameters"},{"location":"http-StatusCreated/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusCreated/#ne","text":"[Source] fun box ne( that: StatusCreated val) : Bool val","title":"ne"},{"location":"http-StatusCreated/#parameters_1","text":"that: StatusCreated val","title":"Parameters"},{"location":"http-StatusCreated/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusExpectationFailed/","text":"StatusExpectationFailed \u00b6 [Source] primitive val StatusExpectationFailed is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusExpectationFailed val^ Returns \u00b6 StatusExpectationFailed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusExpectationFailed val) : Bool val Parameters \u00b6 that: StatusExpectationFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusExpectationFailed val) : Bool val Parameters \u00b6 that: StatusExpectationFailed val Returns \u00b6 Bool val","title":"primitive StatusExpectationFailed"},{"location":"http-StatusExpectationFailed/#statusexpectationfailed","text":"[Source] primitive val StatusExpectationFailed is Status val","title":"StatusExpectationFailed"},{"location":"http-StatusExpectationFailed/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusExpectationFailed/#constructors","text":"","title":"Constructors"},{"location":"http-StatusExpectationFailed/#create","text":"[Source] new val create() : StatusExpectationFailed val^","title":"create"},{"location":"http-StatusExpectationFailed/#returns","text":"StatusExpectationFailed val^","title":"Returns"},{"location":"http-StatusExpectationFailed/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusExpectationFailed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusExpectationFailed/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusExpectationFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusExpectationFailed/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusExpectationFailed/#eq","text":"[Source] fun box eq( that: StatusExpectationFailed val) : Bool val","title":"eq"},{"location":"http-StatusExpectationFailed/#parameters","text":"that: StatusExpectationFailed val","title":"Parameters"},{"location":"http-StatusExpectationFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusExpectationFailed/#ne","text":"[Source] fun box ne( that: StatusExpectationFailed val) : Bool val","title":"ne"},{"location":"http-StatusExpectationFailed/#parameters_1","text":"that: StatusExpectationFailed val","title":"Parameters"},{"location":"http-StatusExpectationFailed/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusForbidden/","text":"StatusForbidden \u00b6 [Source] primitive val StatusForbidden is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusForbidden val^ Returns \u00b6 StatusForbidden val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusForbidden val) : Bool val Parameters \u00b6 that: StatusForbidden val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusForbidden val) : Bool val Parameters \u00b6 that: StatusForbidden val Returns \u00b6 Bool val","title":"primitive StatusForbidden"},{"location":"http-StatusForbidden/#statusforbidden","text":"[Source] primitive val StatusForbidden is Status val","title":"StatusForbidden"},{"location":"http-StatusForbidden/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusForbidden/#constructors","text":"","title":"Constructors"},{"location":"http-StatusForbidden/#create","text":"[Source] new val create() : StatusForbidden val^","title":"create"},{"location":"http-StatusForbidden/#returns","text":"StatusForbidden val^","title":"Returns"},{"location":"http-StatusForbidden/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusForbidden/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusForbidden/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusForbidden/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusForbidden/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusForbidden/#eq","text":"[Source] fun box eq( that: StatusForbidden val) : Bool val","title":"eq"},{"location":"http-StatusForbidden/#parameters","text":"that: StatusForbidden val","title":"Parameters"},{"location":"http-StatusForbidden/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusForbidden/#ne","text":"[Source] fun box ne( that: StatusForbidden val) : Bool val","title":"ne"},{"location":"http-StatusForbidden/#parameters_1","text":"that: StatusForbidden val","title":"Parameters"},{"location":"http-StatusForbidden/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusFound/","text":"StatusFound \u00b6 [Source] primitive val StatusFound is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusFound val^ Returns \u00b6 StatusFound val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusFound val) : Bool val Parameters \u00b6 that: StatusFound val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusFound val) : Bool val Parameters \u00b6 that: StatusFound val Returns \u00b6 Bool val","title":"primitive StatusFound"},{"location":"http-StatusFound/#statusfound","text":"[Source] primitive val StatusFound is Status val","title":"StatusFound"},{"location":"http-StatusFound/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusFound/#constructors","text":"","title":"Constructors"},{"location":"http-StatusFound/#create","text":"[Source] new val create() : StatusFound val^","title":"create"},{"location":"http-StatusFound/#returns","text":"StatusFound val^","title":"Returns"},{"location":"http-StatusFound/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusFound/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusFound/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusFound/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusFound/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusFound/#eq","text":"[Source] fun box eq( that: StatusFound val) : Bool val","title":"eq"},{"location":"http-StatusFound/#parameters","text":"that: StatusFound val","title":"Parameters"},{"location":"http-StatusFound/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusFound/#ne","text":"[Source] fun box ne( that: StatusFound val) : Bool val","title":"ne"},{"location":"http-StatusFound/#parameters_1","text":"that: StatusFound val","title":"Parameters"},{"location":"http-StatusFound/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusGatewayTimeout/","text":"StatusGatewayTimeout \u00b6 [Source] primitive val StatusGatewayTimeout is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusGatewayTimeout val^ Returns \u00b6 StatusGatewayTimeout val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusGatewayTimeout val) : Bool val Parameters \u00b6 that: StatusGatewayTimeout val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusGatewayTimeout val) : Bool val Parameters \u00b6 that: StatusGatewayTimeout val Returns \u00b6 Bool val","title":"primitive StatusGatewayTimeout"},{"location":"http-StatusGatewayTimeout/#statusgatewaytimeout","text":"[Source] primitive val StatusGatewayTimeout is Status val","title":"StatusGatewayTimeout"},{"location":"http-StatusGatewayTimeout/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusGatewayTimeout/#constructors","text":"","title":"Constructors"},{"location":"http-StatusGatewayTimeout/#create","text":"[Source] new val create() : StatusGatewayTimeout val^","title":"create"},{"location":"http-StatusGatewayTimeout/#returns","text":"StatusGatewayTimeout val^","title":"Returns"},{"location":"http-StatusGatewayTimeout/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusGatewayTimeout/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusGatewayTimeout/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusGatewayTimeout/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusGatewayTimeout/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusGatewayTimeout/#eq","text":"[Source] fun box eq( that: StatusGatewayTimeout val) : Bool val","title":"eq"},{"location":"http-StatusGatewayTimeout/#parameters","text":"that: StatusGatewayTimeout val","title":"Parameters"},{"location":"http-StatusGatewayTimeout/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusGatewayTimeout/#ne","text":"[Source] fun box ne( that: StatusGatewayTimeout val) : Bool val","title":"ne"},{"location":"http-StatusGatewayTimeout/#parameters_1","text":"that: StatusGatewayTimeout val","title":"Parameters"},{"location":"http-StatusGatewayTimeout/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusGone/","text":"StatusGone \u00b6 [Source] primitive val StatusGone is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusGone val^ Returns \u00b6 StatusGone val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusGone val) : Bool val Parameters \u00b6 that: StatusGone val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusGone val) : Bool val Parameters \u00b6 that: StatusGone val Returns \u00b6 Bool val","title":"primitive StatusGone"},{"location":"http-StatusGone/#statusgone","text":"[Source] primitive val StatusGone is Status val","title":"StatusGone"},{"location":"http-StatusGone/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusGone/#constructors","text":"","title":"Constructors"},{"location":"http-StatusGone/#create","text":"[Source] new val create() : StatusGone val^","title":"create"},{"location":"http-StatusGone/#returns","text":"StatusGone val^","title":"Returns"},{"location":"http-StatusGone/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusGone/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusGone/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusGone/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusGone/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusGone/#eq","text":"[Source] fun box eq( that: StatusGone val) : Bool val","title":"eq"},{"location":"http-StatusGone/#parameters","text":"that: StatusGone val","title":"Parameters"},{"location":"http-StatusGone/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusGone/#ne","text":"[Source] fun box ne( that: StatusGone val) : Bool val","title":"ne"},{"location":"http-StatusGone/#parameters_1","text":"that: StatusGone val","title":"Parameters"},{"location":"http-StatusGone/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusHTTPVersionNotSupported/","text":"StatusHTTPVersionNotSupported \u00b6 [Source] primitive val StatusHTTPVersionNotSupported is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusHTTPVersionNotSupported val^ Returns \u00b6 StatusHTTPVersionNotSupported val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusHTTPVersionNotSupported val) : Bool val Parameters \u00b6 that: StatusHTTPVersionNotSupported val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusHTTPVersionNotSupported val) : Bool val Parameters \u00b6 that: StatusHTTPVersionNotSupported val Returns \u00b6 Bool val","title":"primitive StatusHTTPVersionNotSupported"},{"location":"http-StatusHTTPVersionNotSupported/#statushttpversionnotsupported","text":"[Source] primitive val StatusHTTPVersionNotSupported is Status val","title":"StatusHTTPVersionNotSupported"},{"location":"http-StatusHTTPVersionNotSupported/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusHTTPVersionNotSupported/#constructors","text":"","title":"Constructors"},{"location":"http-StatusHTTPVersionNotSupported/#create","text":"[Source] new val create() : StatusHTTPVersionNotSupported val^","title":"create"},{"location":"http-StatusHTTPVersionNotSupported/#returns","text":"StatusHTTPVersionNotSupported val^","title":"Returns"},{"location":"http-StatusHTTPVersionNotSupported/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusHTTPVersionNotSupported/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusHTTPVersionNotSupported/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusHTTPVersionNotSupported/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusHTTPVersionNotSupported/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusHTTPVersionNotSupported/#eq","text":"[Source] fun box eq( that: StatusHTTPVersionNotSupported val) : Bool val","title":"eq"},{"location":"http-StatusHTTPVersionNotSupported/#parameters","text":"that: StatusHTTPVersionNotSupported val","title":"Parameters"},{"location":"http-StatusHTTPVersionNotSupported/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusHTTPVersionNotSupported/#ne","text":"[Source] fun box ne( that: StatusHTTPVersionNotSupported val) : Bool val","title":"ne"},{"location":"http-StatusHTTPVersionNotSupported/#parameters_1","text":"that: StatusHTTPVersionNotSupported val","title":"Parameters"},{"location":"http-StatusHTTPVersionNotSupported/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusInternalServerError/","text":"StatusInternalServerError \u00b6 [Source] primitive val StatusInternalServerError is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusInternalServerError val^ Returns \u00b6 StatusInternalServerError val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusInternalServerError val) : Bool val Parameters \u00b6 that: StatusInternalServerError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusInternalServerError val) : Bool val Parameters \u00b6 that: StatusInternalServerError val Returns \u00b6 Bool val","title":"primitive StatusInternalServerError"},{"location":"http-StatusInternalServerError/#statusinternalservererror","text":"[Source] primitive val StatusInternalServerError is Status val","title":"StatusInternalServerError"},{"location":"http-StatusInternalServerError/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusInternalServerError/#constructors","text":"","title":"Constructors"},{"location":"http-StatusInternalServerError/#create","text":"[Source] new val create() : StatusInternalServerError val^","title":"create"},{"location":"http-StatusInternalServerError/#returns","text":"StatusInternalServerError val^","title":"Returns"},{"location":"http-StatusInternalServerError/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusInternalServerError/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusInternalServerError/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusInternalServerError/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusInternalServerError/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusInternalServerError/#eq","text":"[Source] fun box eq( that: StatusInternalServerError val) : Bool val","title":"eq"},{"location":"http-StatusInternalServerError/#parameters","text":"that: StatusInternalServerError val","title":"Parameters"},{"location":"http-StatusInternalServerError/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusInternalServerError/#ne","text":"[Source] fun box ne( that: StatusInternalServerError val) : Bool val","title":"ne"},{"location":"http-StatusInternalServerError/#parameters_1","text":"that: StatusInternalServerError val","title":"Parameters"},{"location":"http-StatusInternalServerError/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusLengthRequired/","text":"StatusLengthRequired \u00b6 [Source] primitive val StatusLengthRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusLengthRequired val^ Returns \u00b6 StatusLengthRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusLengthRequired val) : Bool val Parameters \u00b6 that: StatusLengthRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusLengthRequired val) : Bool val Parameters \u00b6 that: StatusLengthRequired val Returns \u00b6 Bool val","title":"primitive StatusLengthRequired"},{"location":"http-StatusLengthRequired/#statuslengthrequired","text":"[Source] primitive val StatusLengthRequired is Status val","title":"StatusLengthRequired"},{"location":"http-StatusLengthRequired/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusLengthRequired/#constructors","text":"","title":"Constructors"},{"location":"http-StatusLengthRequired/#create","text":"[Source] new val create() : StatusLengthRequired val^","title":"create"},{"location":"http-StatusLengthRequired/#returns","text":"StatusLengthRequired val^","title":"Returns"},{"location":"http-StatusLengthRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusLengthRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusLengthRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusLengthRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusLengthRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusLengthRequired/#eq","text":"[Source] fun box eq( that: StatusLengthRequired val) : Bool val","title":"eq"},{"location":"http-StatusLengthRequired/#parameters","text":"that: StatusLengthRequired val","title":"Parameters"},{"location":"http-StatusLengthRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusLengthRequired/#ne","text":"[Source] fun box ne( that: StatusLengthRequired val) : Bool val","title":"ne"},{"location":"http-StatusLengthRequired/#parameters_1","text":"that: StatusLengthRequired val","title":"Parameters"},{"location":"http-StatusLengthRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusMethodNotAllowed/","text":"StatusMethodNotAllowed \u00b6 [Source] primitive val StatusMethodNotAllowed is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusMethodNotAllowed val^ Returns \u00b6 StatusMethodNotAllowed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusMethodNotAllowed val) : Bool val Parameters \u00b6 that: StatusMethodNotAllowed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusMethodNotAllowed val) : Bool val Parameters \u00b6 that: StatusMethodNotAllowed val Returns \u00b6 Bool val","title":"primitive StatusMethodNotAllowed"},{"location":"http-StatusMethodNotAllowed/#statusmethodnotallowed","text":"[Source] primitive val StatusMethodNotAllowed is Status val","title":"StatusMethodNotAllowed"},{"location":"http-StatusMethodNotAllowed/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusMethodNotAllowed/#constructors","text":"","title":"Constructors"},{"location":"http-StatusMethodNotAllowed/#create","text":"[Source] new val create() : StatusMethodNotAllowed val^","title":"create"},{"location":"http-StatusMethodNotAllowed/#returns","text":"StatusMethodNotAllowed val^","title":"Returns"},{"location":"http-StatusMethodNotAllowed/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusMethodNotAllowed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusMethodNotAllowed/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusMethodNotAllowed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusMethodNotAllowed/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusMethodNotAllowed/#eq","text":"[Source] fun box eq( that: StatusMethodNotAllowed val) : Bool val","title":"eq"},{"location":"http-StatusMethodNotAllowed/#parameters","text":"that: StatusMethodNotAllowed val","title":"Parameters"},{"location":"http-StatusMethodNotAllowed/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusMethodNotAllowed/#ne","text":"[Source] fun box ne( that: StatusMethodNotAllowed val) : Bool val","title":"ne"},{"location":"http-StatusMethodNotAllowed/#parameters_1","text":"that: StatusMethodNotAllowed val","title":"Parameters"},{"location":"http-StatusMethodNotAllowed/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusMovedPermanently/","text":"StatusMovedPermanently \u00b6 [Source] primitive val StatusMovedPermanently is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusMovedPermanently val^ Returns \u00b6 StatusMovedPermanently val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusMovedPermanently val) : Bool val Parameters \u00b6 that: StatusMovedPermanently val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusMovedPermanently val) : Bool val Parameters \u00b6 that: StatusMovedPermanently val Returns \u00b6 Bool val","title":"primitive StatusMovedPermanently"},{"location":"http-StatusMovedPermanently/#statusmovedpermanently","text":"[Source] primitive val StatusMovedPermanently is Status val","title":"StatusMovedPermanently"},{"location":"http-StatusMovedPermanently/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusMovedPermanently/#constructors","text":"","title":"Constructors"},{"location":"http-StatusMovedPermanently/#create","text":"[Source] new val create() : StatusMovedPermanently val^","title":"create"},{"location":"http-StatusMovedPermanently/#returns","text":"StatusMovedPermanently val^","title":"Returns"},{"location":"http-StatusMovedPermanently/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusMovedPermanently/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusMovedPermanently/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusMovedPermanently/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusMovedPermanently/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusMovedPermanently/#eq","text":"[Source] fun box eq( that: StatusMovedPermanently val) : Bool val","title":"eq"},{"location":"http-StatusMovedPermanently/#parameters","text":"that: StatusMovedPermanently val","title":"Parameters"},{"location":"http-StatusMovedPermanently/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusMovedPermanently/#ne","text":"[Source] fun box ne( that: StatusMovedPermanently val) : Bool val","title":"ne"},{"location":"http-StatusMovedPermanently/#parameters_1","text":"that: StatusMovedPermanently val","title":"Parameters"},{"location":"http-StatusMovedPermanently/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusMultipleChoices/","text":"StatusMultipleChoices \u00b6 [Source] primitive val StatusMultipleChoices is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusMultipleChoices val^ Returns \u00b6 StatusMultipleChoices val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusMultipleChoices val) : Bool val Parameters \u00b6 that: StatusMultipleChoices val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusMultipleChoices val) : Bool val Parameters \u00b6 that: StatusMultipleChoices val Returns \u00b6 Bool val","title":"primitive StatusMultipleChoices"},{"location":"http-StatusMultipleChoices/#statusmultiplechoices","text":"[Source] primitive val StatusMultipleChoices is Status val","title":"StatusMultipleChoices"},{"location":"http-StatusMultipleChoices/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusMultipleChoices/#constructors","text":"","title":"Constructors"},{"location":"http-StatusMultipleChoices/#create","text":"[Source] new val create() : StatusMultipleChoices val^","title":"create"},{"location":"http-StatusMultipleChoices/#returns","text":"StatusMultipleChoices val^","title":"Returns"},{"location":"http-StatusMultipleChoices/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusMultipleChoices/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusMultipleChoices/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusMultipleChoices/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusMultipleChoices/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusMultipleChoices/#eq","text":"[Source] fun box eq( that: StatusMultipleChoices val) : Bool val","title":"eq"},{"location":"http-StatusMultipleChoices/#parameters","text":"that: StatusMultipleChoices val","title":"Parameters"},{"location":"http-StatusMultipleChoices/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusMultipleChoices/#ne","text":"[Source] fun box ne( that: StatusMultipleChoices val) : Bool val","title":"ne"},{"location":"http-StatusMultipleChoices/#parameters_1","text":"that: StatusMultipleChoices val","title":"Parameters"},{"location":"http-StatusMultipleChoices/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNetworkAuthenticationRequired/","text":"StatusNetworkAuthenticationRequired \u00b6 [Source] primitive val StatusNetworkAuthenticationRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNetworkAuthenticationRequired val^ Returns \u00b6 StatusNetworkAuthenticationRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNetworkAuthenticationRequired val) : Bool val Parameters \u00b6 that: StatusNetworkAuthenticationRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNetworkAuthenticationRequired val) : Bool val Parameters \u00b6 that: StatusNetworkAuthenticationRequired val Returns \u00b6 Bool val","title":"primitive StatusNetworkAuthenticationRequired"},{"location":"http-StatusNetworkAuthenticationRequired/#statusnetworkauthenticationrequired","text":"[Source] primitive val StatusNetworkAuthenticationRequired is Status val","title":"StatusNetworkAuthenticationRequired"},{"location":"http-StatusNetworkAuthenticationRequired/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNetworkAuthenticationRequired/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNetworkAuthenticationRequired/#create","text":"[Source] new val create() : StatusNetworkAuthenticationRequired val^","title":"create"},{"location":"http-StatusNetworkAuthenticationRequired/#returns","text":"StatusNetworkAuthenticationRequired val^","title":"Returns"},{"location":"http-StatusNetworkAuthenticationRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNetworkAuthenticationRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNetworkAuthenticationRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNetworkAuthenticationRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNetworkAuthenticationRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNetworkAuthenticationRequired/#eq","text":"[Source] fun box eq( that: StatusNetworkAuthenticationRequired val) : Bool val","title":"eq"},{"location":"http-StatusNetworkAuthenticationRequired/#parameters","text":"that: StatusNetworkAuthenticationRequired val","title":"Parameters"},{"location":"http-StatusNetworkAuthenticationRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNetworkAuthenticationRequired/#ne","text":"[Source] fun box ne( that: StatusNetworkAuthenticationRequired val) : Bool val","title":"ne"},{"location":"http-StatusNetworkAuthenticationRequired/#parameters_1","text":"that: StatusNetworkAuthenticationRequired val","title":"Parameters"},{"location":"http-StatusNetworkAuthenticationRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNoContent/","text":"StatusNoContent \u00b6 [Source] primitive val StatusNoContent is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNoContent val^ Returns \u00b6 StatusNoContent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNoContent val) : Bool val Parameters \u00b6 that: StatusNoContent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNoContent val) : Bool val Parameters \u00b6 that: StatusNoContent val Returns \u00b6 Bool val","title":"primitive StatusNoContent"},{"location":"http-StatusNoContent/#statusnocontent","text":"[Source] primitive val StatusNoContent is Status val","title":"StatusNoContent"},{"location":"http-StatusNoContent/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNoContent/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNoContent/#create","text":"[Source] new val create() : StatusNoContent val^","title":"create"},{"location":"http-StatusNoContent/#returns","text":"StatusNoContent val^","title":"Returns"},{"location":"http-StatusNoContent/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNoContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNoContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNoContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNoContent/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNoContent/#eq","text":"[Source] fun box eq( that: StatusNoContent val) : Bool val","title":"eq"},{"location":"http-StatusNoContent/#parameters","text":"that: StatusNoContent val","title":"Parameters"},{"location":"http-StatusNoContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNoContent/#ne","text":"[Source] fun box ne( that: StatusNoContent val) : Bool val","title":"ne"},{"location":"http-StatusNoContent/#parameters_1","text":"that: StatusNoContent val","title":"Parameters"},{"location":"http-StatusNoContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNonAuthoritativeInfo/","text":"StatusNonAuthoritativeInfo \u00b6 [Source] primitive val StatusNonAuthoritativeInfo is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNonAuthoritativeInfo val^ Returns \u00b6 StatusNonAuthoritativeInfo val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNonAuthoritativeInfo val) : Bool val Parameters \u00b6 that: StatusNonAuthoritativeInfo val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNonAuthoritativeInfo val) : Bool val Parameters \u00b6 that: StatusNonAuthoritativeInfo val Returns \u00b6 Bool val","title":"primitive StatusNonAuthoritativeInfo"},{"location":"http-StatusNonAuthoritativeInfo/#statusnonauthoritativeinfo","text":"[Source] primitive val StatusNonAuthoritativeInfo is Status val","title":"StatusNonAuthoritativeInfo"},{"location":"http-StatusNonAuthoritativeInfo/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNonAuthoritativeInfo/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNonAuthoritativeInfo/#create","text":"[Source] new val create() : StatusNonAuthoritativeInfo val^","title":"create"},{"location":"http-StatusNonAuthoritativeInfo/#returns","text":"StatusNonAuthoritativeInfo val^","title":"Returns"},{"location":"http-StatusNonAuthoritativeInfo/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNonAuthoritativeInfo/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNonAuthoritativeInfo/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNonAuthoritativeInfo/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNonAuthoritativeInfo/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNonAuthoritativeInfo/#eq","text":"[Source] fun box eq( that: StatusNonAuthoritativeInfo val) : Bool val","title":"eq"},{"location":"http-StatusNonAuthoritativeInfo/#parameters","text":"that: StatusNonAuthoritativeInfo val","title":"Parameters"},{"location":"http-StatusNonAuthoritativeInfo/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNonAuthoritativeInfo/#ne","text":"[Source] fun box ne( that: StatusNonAuthoritativeInfo val) : Bool val","title":"ne"},{"location":"http-StatusNonAuthoritativeInfo/#parameters_1","text":"that: StatusNonAuthoritativeInfo val","title":"Parameters"},{"location":"http-StatusNonAuthoritativeInfo/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNotAcceptable/","text":"StatusNotAcceptable \u00b6 [Source] primitive val StatusNotAcceptable is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotAcceptable val^ Returns \u00b6 StatusNotAcceptable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotAcceptable val) : Bool val Parameters \u00b6 that: StatusNotAcceptable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotAcceptable val) : Bool val Parameters \u00b6 that: StatusNotAcceptable val Returns \u00b6 Bool val","title":"primitive StatusNotAcceptable"},{"location":"http-StatusNotAcceptable/#statusnotacceptable","text":"[Source] primitive val StatusNotAcceptable is Status val","title":"StatusNotAcceptable"},{"location":"http-StatusNotAcceptable/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNotAcceptable/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNotAcceptable/#create","text":"[Source] new val create() : StatusNotAcceptable val^","title":"create"},{"location":"http-StatusNotAcceptable/#returns","text":"StatusNotAcceptable val^","title":"Returns"},{"location":"http-StatusNotAcceptable/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNotAcceptable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNotAcceptable/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNotAcceptable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNotAcceptable/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNotAcceptable/#eq","text":"[Source] fun box eq( that: StatusNotAcceptable val) : Bool val","title":"eq"},{"location":"http-StatusNotAcceptable/#parameters","text":"that: StatusNotAcceptable val","title":"Parameters"},{"location":"http-StatusNotAcceptable/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNotAcceptable/#ne","text":"[Source] fun box ne( that: StatusNotAcceptable val) : Bool val","title":"ne"},{"location":"http-StatusNotAcceptable/#parameters_1","text":"that: StatusNotAcceptable val","title":"Parameters"},{"location":"http-StatusNotAcceptable/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNotFound/","text":"StatusNotFound \u00b6 [Source] primitive val StatusNotFound is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotFound val^ Returns \u00b6 StatusNotFound val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotFound val) : Bool val Parameters \u00b6 that: StatusNotFound val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotFound val) : Bool val Parameters \u00b6 that: StatusNotFound val Returns \u00b6 Bool val","title":"primitive StatusNotFound"},{"location":"http-StatusNotFound/#statusnotfound","text":"[Source] primitive val StatusNotFound is Status val","title":"StatusNotFound"},{"location":"http-StatusNotFound/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNotFound/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNotFound/#create","text":"[Source] new val create() : StatusNotFound val^","title":"create"},{"location":"http-StatusNotFound/#returns","text":"StatusNotFound val^","title":"Returns"},{"location":"http-StatusNotFound/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNotFound/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNotFound/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNotFound/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNotFound/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNotFound/#eq","text":"[Source] fun box eq( that: StatusNotFound val) : Bool val","title":"eq"},{"location":"http-StatusNotFound/#parameters","text":"that: StatusNotFound val","title":"Parameters"},{"location":"http-StatusNotFound/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNotFound/#ne","text":"[Source] fun box ne( that: StatusNotFound val) : Bool val","title":"ne"},{"location":"http-StatusNotFound/#parameters_1","text":"that: StatusNotFound val","title":"Parameters"},{"location":"http-StatusNotFound/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNotImplemented/","text":"StatusNotImplemented \u00b6 [Source] primitive val StatusNotImplemented is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotImplemented val^ Returns \u00b6 StatusNotImplemented val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotImplemented val) : Bool val Parameters \u00b6 that: StatusNotImplemented val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotImplemented val) : Bool val Parameters \u00b6 that: StatusNotImplemented val Returns \u00b6 Bool val","title":"primitive StatusNotImplemented"},{"location":"http-StatusNotImplemented/#statusnotimplemented","text":"[Source] primitive val StatusNotImplemented is Status val","title":"StatusNotImplemented"},{"location":"http-StatusNotImplemented/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNotImplemented/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNotImplemented/#create","text":"[Source] new val create() : StatusNotImplemented val^","title":"create"},{"location":"http-StatusNotImplemented/#returns","text":"StatusNotImplemented val^","title":"Returns"},{"location":"http-StatusNotImplemented/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNotImplemented/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNotImplemented/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNotImplemented/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNotImplemented/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNotImplemented/#eq","text":"[Source] fun box eq( that: StatusNotImplemented val) : Bool val","title":"eq"},{"location":"http-StatusNotImplemented/#parameters","text":"that: StatusNotImplemented val","title":"Parameters"},{"location":"http-StatusNotImplemented/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNotImplemented/#ne","text":"[Source] fun box ne( that: StatusNotImplemented val) : Bool val","title":"ne"},{"location":"http-StatusNotImplemented/#parameters_1","text":"that: StatusNotImplemented val","title":"Parameters"},{"location":"http-StatusNotImplemented/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusNotModified/","text":"StatusNotModified \u00b6 [Source] primitive val StatusNotModified is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusNotModified val^ Returns \u00b6 StatusNotModified val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusNotModified val) : Bool val Parameters \u00b6 that: StatusNotModified val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusNotModified val) : Bool val Parameters \u00b6 that: StatusNotModified val Returns \u00b6 Bool val","title":"primitive StatusNotModified"},{"location":"http-StatusNotModified/#statusnotmodified","text":"[Source] primitive val StatusNotModified is Status val","title":"StatusNotModified"},{"location":"http-StatusNotModified/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusNotModified/#constructors","text":"","title":"Constructors"},{"location":"http-StatusNotModified/#create","text":"[Source] new val create() : StatusNotModified val^","title":"create"},{"location":"http-StatusNotModified/#returns","text":"StatusNotModified val^","title":"Returns"},{"location":"http-StatusNotModified/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusNotModified/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusNotModified/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusNotModified/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusNotModified/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusNotModified/#eq","text":"[Source] fun box eq( that: StatusNotModified val) : Bool val","title":"eq"},{"location":"http-StatusNotModified/#parameters","text":"that: StatusNotModified val","title":"Parameters"},{"location":"http-StatusNotModified/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusNotModified/#ne","text":"[Source] fun box ne( that: StatusNotModified val) : Bool val","title":"ne"},{"location":"http-StatusNotModified/#parameters_1","text":"that: StatusNotModified val","title":"Parameters"},{"location":"http-StatusNotModified/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusOK/","text":"StatusOK \u00b6 [Source] primitive val StatusOK is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusOK val^ Returns \u00b6 StatusOK val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusOK val) : Bool val Parameters \u00b6 that: StatusOK val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusOK val) : Bool val Parameters \u00b6 that: StatusOK val Returns \u00b6 Bool val","title":"primitive StatusOK"},{"location":"http-StatusOK/#statusok","text":"[Source] primitive val StatusOK is Status val","title":"StatusOK"},{"location":"http-StatusOK/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusOK/#constructors","text":"","title":"Constructors"},{"location":"http-StatusOK/#create","text":"[Source] new val create() : StatusOK val^","title":"create"},{"location":"http-StatusOK/#returns","text":"StatusOK val^","title":"Returns"},{"location":"http-StatusOK/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusOK/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusOK/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusOK/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusOK/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusOK/#eq","text":"[Source] fun box eq( that: StatusOK val) : Bool val","title":"eq"},{"location":"http-StatusOK/#parameters","text":"that: StatusOK val","title":"Parameters"},{"location":"http-StatusOK/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusOK/#ne","text":"[Source] fun box ne( that: StatusOK val) : Bool val","title":"ne"},{"location":"http-StatusOK/#parameters_1","text":"that: StatusOK val","title":"Parameters"},{"location":"http-StatusOK/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusPartialContent/","text":"StatusPartialContent \u00b6 [Source] primitive val StatusPartialContent is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPartialContent val^ Returns \u00b6 StatusPartialContent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPartialContent val) : Bool val Parameters \u00b6 that: StatusPartialContent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPartialContent val) : Bool val Parameters \u00b6 that: StatusPartialContent val Returns \u00b6 Bool val","title":"primitive StatusPartialContent"},{"location":"http-StatusPartialContent/#statuspartialcontent","text":"[Source] primitive val StatusPartialContent is Status val","title":"StatusPartialContent"},{"location":"http-StatusPartialContent/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusPartialContent/#constructors","text":"","title":"Constructors"},{"location":"http-StatusPartialContent/#create","text":"[Source] new val create() : StatusPartialContent val^","title":"create"},{"location":"http-StatusPartialContent/#returns","text":"StatusPartialContent val^","title":"Returns"},{"location":"http-StatusPartialContent/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusPartialContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusPartialContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusPartialContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusPartialContent/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusPartialContent/#eq","text":"[Source] fun box eq( that: StatusPartialContent val) : Bool val","title":"eq"},{"location":"http-StatusPartialContent/#parameters","text":"that: StatusPartialContent val","title":"Parameters"},{"location":"http-StatusPartialContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusPartialContent/#ne","text":"[Source] fun box ne( that: StatusPartialContent val) : Bool val","title":"ne"},{"location":"http-StatusPartialContent/#parameters_1","text":"that: StatusPartialContent val","title":"Parameters"},{"location":"http-StatusPartialContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusPaymentRequired/","text":"StatusPaymentRequired \u00b6 [Source] primitive val StatusPaymentRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPaymentRequired val^ Returns \u00b6 StatusPaymentRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPaymentRequired val) : Bool val Parameters \u00b6 that: StatusPaymentRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPaymentRequired val) : Bool val Parameters \u00b6 that: StatusPaymentRequired val Returns \u00b6 Bool val","title":"primitive StatusPaymentRequired"},{"location":"http-StatusPaymentRequired/#statuspaymentrequired","text":"[Source] primitive val StatusPaymentRequired is Status val","title":"StatusPaymentRequired"},{"location":"http-StatusPaymentRequired/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusPaymentRequired/#constructors","text":"","title":"Constructors"},{"location":"http-StatusPaymentRequired/#create","text":"[Source] new val create() : StatusPaymentRequired val^","title":"create"},{"location":"http-StatusPaymentRequired/#returns","text":"StatusPaymentRequired val^","title":"Returns"},{"location":"http-StatusPaymentRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusPaymentRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusPaymentRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusPaymentRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusPaymentRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusPaymentRequired/#eq","text":"[Source] fun box eq( that: StatusPaymentRequired val) : Bool val","title":"eq"},{"location":"http-StatusPaymentRequired/#parameters","text":"that: StatusPaymentRequired val","title":"Parameters"},{"location":"http-StatusPaymentRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusPaymentRequired/#ne","text":"[Source] fun box ne( that: StatusPaymentRequired val) : Bool val","title":"ne"},{"location":"http-StatusPaymentRequired/#parameters_1","text":"that: StatusPaymentRequired val","title":"Parameters"},{"location":"http-StatusPaymentRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusPreconditionFailed/","text":"StatusPreconditionFailed \u00b6 [Source] primitive val StatusPreconditionFailed is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPreconditionFailed val^ Returns \u00b6 StatusPreconditionFailed val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPreconditionFailed val) : Bool val Parameters \u00b6 that: StatusPreconditionFailed val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPreconditionFailed val) : Bool val Parameters \u00b6 that: StatusPreconditionFailed val Returns \u00b6 Bool val","title":"primitive StatusPreconditionFailed"},{"location":"http-StatusPreconditionFailed/#statuspreconditionfailed","text":"[Source] primitive val StatusPreconditionFailed is Status val","title":"StatusPreconditionFailed"},{"location":"http-StatusPreconditionFailed/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusPreconditionFailed/#constructors","text":"","title":"Constructors"},{"location":"http-StatusPreconditionFailed/#create","text":"[Source] new val create() : StatusPreconditionFailed val^","title":"create"},{"location":"http-StatusPreconditionFailed/#returns","text":"StatusPreconditionFailed val^","title":"Returns"},{"location":"http-StatusPreconditionFailed/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusPreconditionFailed/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusPreconditionFailed/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusPreconditionFailed/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusPreconditionFailed/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusPreconditionFailed/#eq","text":"[Source] fun box eq( that: StatusPreconditionFailed val) : Bool val","title":"eq"},{"location":"http-StatusPreconditionFailed/#parameters","text":"that: StatusPreconditionFailed val","title":"Parameters"},{"location":"http-StatusPreconditionFailed/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusPreconditionFailed/#ne","text":"[Source] fun box ne( that: StatusPreconditionFailed val) : Bool val","title":"ne"},{"location":"http-StatusPreconditionFailed/#parameters_1","text":"that: StatusPreconditionFailed val","title":"Parameters"},{"location":"http-StatusPreconditionFailed/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusPreconditionRequired/","text":"StatusPreconditionRequired \u00b6 [Source] primitive val StatusPreconditionRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusPreconditionRequired val^ Returns \u00b6 StatusPreconditionRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusPreconditionRequired val) : Bool val Parameters \u00b6 that: StatusPreconditionRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusPreconditionRequired val) : Bool val Parameters \u00b6 that: StatusPreconditionRequired val Returns \u00b6 Bool val","title":"primitive StatusPreconditionRequired"},{"location":"http-StatusPreconditionRequired/#statuspreconditionrequired","text":"[Source] primitive val StatusPreconditionRequired is Status val","title":"StatusPreconditionRequired"},{"location":"http-StatusPreconditionRequired/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusPreconditionRequired/#constructors","text":"","title":"Constructors"},{"location":"http-StatusPreconditionRequired/#create","text":"[Source] new val create() : StatusPreconditionRequired val^","title":"create"},{"location":"http-StatusPreconditionRequired/#returns","text":"StatusPreconditionRequired val^","title":"Returns"},{"location":"http-StatusPreconditionRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusPreconditionRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusPreconditionRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusPreconditionRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusPreconditionRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusPreconditionRequired/#eq","text":"[Source] fun box eq( that: StatusPreconditionRequired val) : Bool val","title":"eq"},{"location":"http-StatusPreconditionRequired/#parameters","text":"that: StatusPreconditionRequired val","title":"Parameters"},{"location":"http-StatusPreconditionRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusPreconditionRequired/#ne","text":"[Source] fun box ne( that: StatusPreconditionRequired val) : Bool val","title":"ne"},{"location":"http-StatusPreconditionRequired/#parameters_1","text":"that: StatusPreconditionRequired val","title":"Parameters"},{"location":"http-StatusPreconditionRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusProxyAuthRequired/","text":"StatusProxyAuthRequired \u00b6 [Source] primitive val StatusProxyAuthRequired is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusProxyAuthRequired val^ Returns \u00b6 StatusProxyAuthRequired val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusProxyAuthRequired val) : Bool val Parameters \u00b6 that: StatusProxyAuthRequired val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusProxyAuthRequired val) : Bool val Parameters \u00b6 that: StatusProxyAuthRequired val Returns \u00b6 Bool val","title":"primitive StatusProxyAuthRequired"},{"location":"http-StatusProxyAuthRequired/#statusproxyauthrequired","text":"[Source] primitive val StatusProxyAuthRequired is Status val","title":"StatusProxyAuthRequired"},{"location":"http-StatusProxyAuthRequired/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusProxyAuthRequired/#constructors","text":"","title":"Constructors"},{"location":"http-StatusProxyAuthRequired/#create","text":"[Source] new val create() : StatusProxyAuthRequired val^","title":"create"},{"location":"http-StatusProxyAuthRequired/#returns","text":"StatusProxyAuthRequired val^","title":"Returns"},{"location":"http-StatusProxyAuthRequired/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusProxyAuthRequired/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusProxyAuthRequired/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusProxyAuthRequired/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusProxyAuthRequired/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusProxyAuthRequired/#eq","text":"[Source] fun box eq( that: StatusProxyAuthRequired val) : Bool val","title":"eq"},{"location":"http-StatusProxyAuthRequired/#parameters","text":"that: StatusProxyAuthRequired val","title":"Parameters"},{"location":"http-StatusProxyAuthRequired/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusProxyAuthRequired/#ne","text":"[Source] fun box ne( that: StatusProxyAuthRequired val) : Bool val","title":"ne"},{"location":"http-StatusProxyAuthRequired/#parameters_1","text":"that: StatusProxyAuthRequired val","title":"Parameters"},{"location":"http-StatusProxyAuthRequired/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestEntityTooLarge/","text":"StatusRequestEntityTooLarge \u00b6 [Source] primitive val StatusRequestEntityTooLarge is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestEntityTooLarge val^ Returns \u00b6 StatusRequestEntityTooLarge val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestEntityTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestEntityTooLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestEntityTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestEntityTooLarge val Returns \u00b6 Bool val","title":"primitive StatusRequestEntityTooLarge"},{"location":"http-StatusRequestEntityTooLarge/#statusrequestentitytoolarge","text":"[Source] primitive val StatusRequestEntityTooLarge is Status val","title":"StatusRequestEntityTooLarge"},{"location":"http-StatusRequestEntityTooLarge/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusRequestEntityTooLarge/#constructors","text":"","title":"Constructors"},{"location":"http-StatusRequestEntityTooLarge/#create","text":"[Source] new val create() : StatusRequestEntityTooLarge val^","title":"create"},{"location":"http-StatusRequestEntityTooLarge/#returns","text":"StatusRequestEntityTooLarge val^","title":"Returns"},{"location":"http-StatusRequestEntityTooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusRequestEntityTooLarge/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusRequestEntityTooLarge/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusRequestEntityTooLarge/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusRequestEntityTooLarge/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusRequestEntityTooLarge/#eq","text":"[Source] fun box eq( that: StatusRequestEntityTooLarge val) : Bool val","title":"eq"},{"location":"http-StatusRequestEntityTooLarge/#parameters","text":"that: StatusRequestEntityTooLarge val","title":"Parameters"},{"location":"http-StatusRequestEntityTooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestEntityTooLarge/#ne","text":"[Source] fun box ne( that: StatusRequestEntityTooLarge val) : Bool val","title":"ne"},{"location":"http-StatusRequestEntityTooLarge/#parameters_1","text":"that: StatusRequestEntityTooLarge val","title":"Parameters"},{"location":"http-StatusRequestEntityTooLarge/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestHeaderFieldsTooLarge/","text":"StatusRequestHeaderFieldsTooLarge \u00b6 [Source] primitive val StatusRequestHeaderFieldsTooLarge is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestHeaderFieldsTooLarge val^ Returns \u00b6 StatusRequestHeaderFieldsTooLarge val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestHeaderFieldsTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestHeaderFieldsTooLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestHeaderFieldsTooLarge val) : Bool val Parameters \u00b6 that: StatusRequestHeaderFieldsTooLarge val Returns \u00b6 Bool val","title":"primitive StatusRequestHeaderFieldsTooLarge"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#statusrequestheaderfieldstoolarge","text":"[Source] primitive val StatusRequestHeaderFieldsTooLarge is Status val","title":"StatusRequestHeaderFieldsTooLarge"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#constructors","text":"","title":"Constructors"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#create","text":"[Source] new val create() : StatusRequestHeaderFieldsTooLarge val^","title":"create"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#returns","text":"StatusRequestHeaderFieldsTooLarge val^","title":"Returns"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#eq","text":"[Source] fun box eq( that: StatusRequestHeaderFieldsTooLarge val) : Bool val","title":"eq"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#parameters","text":"that: StatusRequestHeaderFieldsTooLarge val","title":"Parameters"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#ne","text":"[Source] fun box ne( that: StatusRequestHeaderFieldsTooLarge val) : Bool val","title":"ne"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#parameters_1","text":"that: StatusRequestHeaderFieldsTooLarge val","title":"Parameters"},{"location":"http-StatusRequestHeaderFieldsTooLarge/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestTimeout/","text":"StatusRequestTimeout \u00b6 [Source] primitive val StatusRequestTimeout is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestTimeout val^ Returns \u00b6 StatusRequestTimeout val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestTimeout val) : Bool val Parameters \u00b6 that: StatusRequestTimeout val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestTimeout val) : Bool val Parameters \u00b6 that: StatusRequestTimeout val Returns \u00b6 Bool val","title":"primitive StatusRequestTimeout"},{"location":"http-StatusRequestTimeout/#statusrequesttimeout","text":"[Source] primitive val StatusRequestTimeout is Status val","title":"StatusRequestTimeout"},{"location":"http-StatusRequestTimeout/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusRequestTimeout/#constructors","text":"","title":"Constructors"},{"location":"http-StatusRequestTimeout/#create","text":"[Source] new val create() : StatusRequestTimeout val^","title":"create"},{"location":"http-StatusRequestTimeout/#returns","text":"StatusRequestTimeout val^","title":"Returns"},{"location":"http-StatusRequestTimeout/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusRequestTimeout/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusRequestTimeout/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusRequestTimeout/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusRequestTimeout/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusRequestTimeout/#eq","text":"[Source] fun box eq( that: StatusRequestTimeout val) : Bool val","title":"eq"},{"location":"http-StatusRequestTimeout/#parameters","text":"that: StatusRequestTimeout val","title":"Parameters"},{"location":"http-StatusRequestTimeout/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestTimeout/#ne","text":"[Source] fun box ne( that: StatusRequestTimeout val) : Bool val","title":"ne"},{"location":"http-StatusRequestTimeout/#parameters_1","text":"that: StatusRequestTimeout val","title":"Parameters"},{"location":"http-StatusRequestTimeout/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestURITooLong/","text":"StatusRequestURITooLong \u00b6 [Source] primitive val StatusRequestURITooLong is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestURITooLong val^ Returns \u00b6 StatusRequestURITooLong val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestURITooLong val) : Bool val Parameters \u00b6 that: StatusRequestURITooLong val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestURITooLong val) : Bool val Parameters \u00b6 that: StatusRequestURITooLong val Returns \u00b6 Bool val","title":"primitive StatusRequestURITooLong"},{"location":"http-StatusRequestURITooLong/#statusrequesturitoolong","text":"[Source] primitive val StatusRequestURITooLong is Status val","title":"StatusRequestURITooLong"},{"location":"http-StatusRequestURITooLong/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusRequestURITooLong/#constructors","text":"","title":"Constructors"},{"location":"http-StatusRequestURITooLong/#create","text":"[Source] new val create() : StatusRequestURITooLong val^","title":"create"},{"location":"http-StatusRequestURITooLong/#returns","text":"StatusRequestURITooLong val^","title":"Returns"},{"location":"http-StatusRequestURITooLong/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusRequestURITooLong/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusRequestURITooLong/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusRequestURITooLong/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusRequestURITooLong/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusRequestURITooLong/#eq","text":"[Source] fun box eq( that: StatusRequestURITooLong val) : Bool val","title":"eq"},{"location":"http-StatusRequestURITooLong/#parameters","text":"that: StatusRequestURITooLong val","title":"Parameters"},{"location":"http-StatusRequestURITooLong/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestURITooLong/#ne","text":"[Source] fun box ne( that: StatusRequestURITooLong val) : Bool val","title":"ne"},{"location":"http-StatusRequestURITooLong/#parameters_1","text":"that: StatusRequestURITooLong val","title":"Parameters"},{"location":"http-StatusRequestURITooLong/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestedRangeNotSatisfiable/","text":"StatusRequestedRangeNotSatisfiable \u00b6 [Source] primitive val StatusRequestedRangeNotSatisfiable is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusRequestedRangeNotSatisfiable val^ Returns \u00b6 StatusRequestedRangeNotSatisfiable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusRequestedRangeNotSatisfiable val) : Bool val Parameters \u00b6 that: StatusRequestedRangeNotSatisfiable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusRequestedRangeNotSatisfiable val) : Bool val Parameters \u00b6 that: StatusRequestedRangeNotSatisfiable val Returns \u00b6 Bool val","title":"primitive StatusRequestedRangeNotSatisfiable"},{"location":"http-StatusRequestedRangeNotSatisfiable/#statusrequestedrangenotsatisfiable","text":"[Source] primitive val StatusRequestedRangeNotSatisfiable is Status val","title":"StatusRequestedRangeNotSatisfiable"},{"location":"http-StatusRequestedRangeNotSatisfiable/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusRequestedRangeNotSatisfiable/#constructors","text":"","title":"Constructors"},{"location":"http-StatusRequestedRangeNotSatisfiable/#create","text":"[Source] new val create() : StatusRequestedRangeNotSatisfiable val^","title":"create"},{"location":"http-StatusRequestedRangeNotSatisfiable/#returns","text":"StatusRequestedRangeNotSatisfiable val^","title":"Returns"},{"location":"http-StatusRequestedRangeNotSatisfiable/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusRequestedRangeNotSatisfiable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusRequestedRangeNotSatisfiable/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusRequestedRangeNotSatisfiable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusRequestedRangeNotSatisfiable/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusRequestedRangeNotSatisfiable/#eq","text":"[Source] fun box eq( that: StatusRequestedRangeNotSatisfiable val) : Bool val","title":"eq"},{"location":"http-StatusRequestedRangeNotSatisfiable/#parameters","text":"that: StatusRequestedRangeNotSatisfiable val","title":"Parameters"},{"location":"http-StatusRequestedRangeNotSatisfiable/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusRequestedRangeNotSatisfiable/#ne","text":"[Source] fun box ne( that: StatusRequestedRangeNotSatisfiable val) : Bool val","title":"ne"},{"location":"http-StatusRequestedRangeNotSatisfiable/#parameters_1","text":"that: StatusRequestedRangeNotSatisfiable val","title":"Parameters"},{"location":"http-StatusRequestedRangeNotSatisfiable/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusResetContent/","text":"StatusResetContent \u00b6 [Source] primitive val StatusResetContent is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusResetContent val^ Returns \u00b6 StatusResetContent val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusResetContent val) : Bool val Parameters \u00b6 that: StatusResetContent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusResetContent val) : Bool val Parameters \u00b6 that: StatusResetContent val Returns \u00b6 Bool val","title":"primitive StatusResetContent"},{"location":"http-StatusResetContent/#statusresetcontent","text":"[Source] primitive val StatusResetContent is Status val","title":"StatusResetContent"},{"location":"http-StatusResetContent/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusResetContent/#constructors","text":"","title":"Constructors"},{"location":"http-StatusResetContent/#create","text":"[Source] new val create() : StatusResetContent val^","title":"create"},{"location":"http-StatusResetContent/#returns","text":"StatusResetContent val^","title":"Returns"},{"location":"http-StatusResetContent/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusResetContent/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusResetContent/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusResetContent/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusResetContent/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusResetContent/#eq","text":"[Source] fun box eq( that: StatusResetContent val) : Bool val","title":"eq"},{"location":"http-StatusResetContent/#parameters","text":"that: StatusResetContent val","title":"Parameters"},{"location":"http-StatusResetContent/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusResetContent/#ne","text":"[Source] fun box ne( that: StatusResetContent val) : Bool val","title":"ne"},{"location":"http-StatusResetContent/#parameters_1","text":"that: StatusResetContent val","title":"Parameters"},{"location":"http-StatusResetContent/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusSeeOther/","text":"StatusSeeOther \u00b6 [Source] primitive val StatusSeeOther is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusSeeOther val^ Returns \u00b6 StatusSeeOther val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusSeeOther val) : Bool val Parameters \u00b6 that: StatusSeeOther val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusSeeOther val) : Bool val Parameters \u00b6 that: StatusSeeOther val Returns \u00b6 Bool val","title":"primitive StatusSeeOther"},{"location":"http-StatusSeeOther/#statusseeother","text":"[Source] primitive val StatusSeeOther is Status val","title":"StatusSeeOther"},{"location":"http-StatusSeeOther/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusSeeOther/#constructors","text":"","title":"Constructors"},{"location":"http-StatusSeeOther/#create","text":"[Source] new val create() : StatusSeeOther val^","title":"create"},{"location":"http-StatusSeeOther/#returns","text":"StatusSeeOther val^","title":"Returns"},{"location":"http-StatusSeeOther/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusSeeOther/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusSeeOther/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusSeeOther/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusSeeOther/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusSeeOther/#eq","text":"[Source] fun box eq( that: StatusSeeOther val) : Bool val","title":"eq"},{"location":"http-StatusSeeOther/#parameters","text":"that: StatusSeeOther val","title":"Parameters"},{"location":"http-StatusSeeOther/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusSeeOther/#ne","text":"[Source] fun box ne( that: StatusSeeOther val) : Bool val","title":"ne"},{"location":"http-StatusSeeOther/#parameters_1","text":"that: StatusSeeOther val","title":"Parameters"},{"location":"http-StatusSeeOther/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusServiceUnavailable/","text":"StatusServiceUnavailable \u00b6 [Source] primitive val StatusServiceUnavailable is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusServiceUnavailable val^ Returns \u00b6 StatusServiceUnavailable val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusServiceUnavailable val) : Bool val Parameters \u00b6 that: StatusServiceUnavailable val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusServiceUnavailable val) : Bool val Parameters \u00b6 that: StatusServiceUnavailable val Returns \u00b6 Bool val","title":"primitive StatusServiceUnavailable"},{"location":"http-StatusServiceUnavailable/#statusserviceunavailable","text":"[Source] primitive val StatusServiceUnavailable is Status val","title":"StatusServiceUnavailable"},{"location":"http-StatusServiceUnavailable/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusServiceUnavailable/#constructors","text":"","title":"Constructors"},{"location":"http-StatusServiceUnavailable/#create","text":"[Source] new val create() : StatusServiceUnavailable val^","title":"create"},{"location":"http-StatusServiceUnavailable/#returns","text":"StatusServiceUnavailable val^","title":"Returns"},{"location":"http-StatusServiceUnavailable/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusServiceUnavailable/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusServiceUnavailable/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusServiceUnavailable/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusServiceUnavailable/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusServiceUnavailable/#eq","text":"[Source] fun box eq( that: StatusServiceUnavailable val) : Bool val","title":"eq"},{"location":"http-StatusServiceUnavailable/#parameters","text":"that: StatusServiceUnavailable val","title":"Parameters"},{"location":"http-StatusServiceUnavailable/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusServiceUnavailable/#ne","text":"[Source] fun box ne( that: StatusServiceUnavailable val) : Bool val","title":"ne"},{"location":"http-StatusServiceUnavailable/#parameters_1","text":"that: StatusServiceUnavailable val","title":"Parameters"},{"location":"http-StatusServiceUnavailable/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusSwitchingProtocols/","text":"StatusSwitchingProtocols \u00b6 [Source] primitive val StatusSwitchingProtocols is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusSwitchingProtocols val^ Returns \u00b6 StatusSwitchingProtocols val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusSwitchingProtocols val) : Bool val Parameters \u00b6 that: StatusSwitchingProtocols val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusSwitchingProtocols val) : Bool val Parameters \u00b6 that: StatusSwitchingProtocols val Returns \u00b6 Bool val","title":"primitive StatusSwitchingProtocols"},{"location":"http-StatusSwitchingProtocols/#statusswitchingprotocols","text":"[Source] primitive val StatusSwitchingProtocols is Status val","title":"StatusSwitchingProtocols"},{"location":"http-StatusSwitchingProtocols/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusSwitchingProtocols/#constructors","text":"","title":"Constructors"},{"location":"http-StatusSwitchingProtocols/#create","text":"[Source] new val create() : StatusSwitchingProtocols val^","title":"create"},{"location":"http-StatusSwitchingProtocols/#returns","text":"StatusSwitchingProtocols val^","title":"Returns"},{"location":"http-StatusSwitchingProtocols/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusSwitchingProtocols/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusSwitchingProtocols/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusSwitchingProtocols/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusSwitchingProtocols/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusSwitchingProtocols/#eq","text":"[Source] fun box eq( that: StatusSwitchingProtocols val) : Bool val","title":"eq"},{"location":"http-StatusSwitchingProtocols/#parameters","text":"that: StatusSwitchingProtocols val","title":"Parameters"},{"location":"http-StatusSwitchingProtocols/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusSwitchingProtocols/#ne","text":"[Source] fun box ne( that: StatusSwitchingProtocols val) : Bool val","title":"ne"},{"location":"http-StatusSwitchingProtocols/#parameters_1","text":"that: StatusSwitchingProtocols val","title":"Parameters"},{"location":"http-StatusSwitchingProtocols/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusTeapot/","text":"StatusTeapot \u00b6 [Source] primitive val StatusTeapot is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusTeapot val^ Returns \u00b6 StatusTeapot val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusTeapot val) : Bool val Parameters \u00b6 that: StatusTeapot val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusTeapot val) : Bool val Parameters \u00b6 that: StatusTeapot val Returns \u00b6 Bool val","title":"primitive StatusTeapot"},{"location":"http-StatusTeapot/#statusteapot","text":"[Source] primitive val StatusTeapot is Status val","title":"StatusTeapot"},{"location":"http-StatusTeapot/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusTeapot/#constructors","text":"","title":"Constructors"},{"location":"http-StatusTeapot/#create","text":"[Source] new val create() : StatusTeapot val^","title":"create"},{"location":"http-StatusTeapot/#returns","text":"StatusTeapot val^","title":"Returns"},{"location":"http-StatusTeapot/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusTeapot/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusTeapot/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusTeapot/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusTeapot/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusTeapot/#eq","text":"[Source] fun box eq( that: StatusTeapot val) : Bool val","title":"eq"},{"location":"http-StatusTeapot/#parameters","text":"that: StatusTeapot val","title":"Parameters"},{"location":"http-StatusTeapot/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusTeapot/#ne","text":"[Source] fun box ne( that: StatusTeapot val) : Bool val","title":"ne"},{"location":"http-StatusTeapot/#parameters_1","text":"that: StatusTeapot val","title":"Parameters"},{"location":"http-StatusTeapot/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusTemporaryRedirect/","text":"StatusTemporaryRedirect \u00b6 [Source] primitive val StatusTemporaryRedirect is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusTemporaryRedirect val^ Returns \u00b6 StatusTemporaryRedirect val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusTemporaryRedirect val) : Bool val Parameters \u00b6 that: StatusTemporaryRedirect val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusTemporaryRedirect val) : Bool val Parameters \u00b6 that: StatusTemporaryRedirect val Returns \u00b6 Bool val","title":"primitive StatusTemporaryRedirect"},{"location":"http-StatusTemporaryRedirect/#statustemporaryredirect","text":"[Source] primitive val StatusTemporaryRedirect is Status val","title":"StatusTemporaryRedirect"},{"location":"http-StatusTemporaryRedirect/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusTemporaryRedirect/#constructors","text":"","title":"Constructors"},{"location":"http-StatusTemporaryRedirect/#create","text":"[Source] new val create() : StatusTemporaryRedirect val^","title":"create"},{"location":"http-StatusTemporaryRedirect/#returns","text":"StatusTemporaryRedirect val^","title":"Returns"},{"location":"http-StatusTemporaryRedirect/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusTemporaryRedirect/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusTemporaryRedirect/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusTemporaryRedirect/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusTemporaryRedirect/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusTemporaryRedirect/#eq","text":"[Source] fun box eq( that: StatusTemporaryRedirect val) : Bool val","title":"eq"},{"location":"http-StatusTemporaryRedirect/#parameters","text":"that: StatusTemporaryRedirect val","title":"Parameters"},{"location":"http-StatusTemporaryRedirect/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusTemporaryRedirect/#ne","text":"[Source] fun box ne( that: StatusTemporaryRedirect val) : Bool val","title":"ne"},{"location":"http-StatusTemporaryRedirect/#parameters_1","text":"that: StatusTemporaryRedirect val","title":"Parameters"},{"location":"http-StatusTemporaryRedirect/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusTooManyRequests/","text":"StatusTooManyRequests \u00b6 [Source] primitive val StatusTooManyRequests is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusTooManyRequests val^ Returns \u00b6 StatusTooManyRequests val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusTooManyRequests val) : Bool val Parameters \u00b6 that: StatusTooManyRequests val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusTooManyRequests val) : Bool val Parameters \u00b6 that: StatusTooManyRequests val Returns \u00b6 Bool val","title":"primitive StatusTooManyRequests"},{"location":"http-StatusTooManyRequests/#statustoomanyrequests","text":"[Source] primitive val StatusTooManyRequests is Status val","title":"StatusTooManyRequests"},{"location":"http-StatusTooManyRequests/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusTooManyRequests/#constructors","text":"","title":"Constructors"},{"location":"http-StatusTooManyRequests/#create","text":"[Source] new val create() : StatusTooManyRequests val^","title":"create"},{"location":"http-StatusTooManyRequests/#returns","text":"StatusTooManyRequests val^","title":"Returns"},{"location":"http-StatusTooManyRequests/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusTooManyRequests/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusTooManyRequests/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusTooManyRequests/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusTooManyRequests/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusTooManyRequests/#eq","text":"[Source] fun box eq( that: StatusTooManyRequests val) : Bool val","title":"eq"},{"location":"http-StatusTooManyRequests/#parameters","text":"that: StatusTooManyRequests val","title":"Parameters"},{"location":"http-StatusTooManyRequests/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusTooManyRequests/#ne","text":"[Source] fun box ne( that: StatusTooManyRequests val) : Bool val","title":"ne"},{"location":"http-StatusTooManyRequests/#parameters_1","text":"that: StatusTooManyRequests val","title":"Parameters"},{"location":"http-StatusTooManyRequests/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusUnauthorized/","text":"StatusUnauthorized \u00b6 [Source] primitive val StatusUnauthorized is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUnauthorized val^ Returns \u00b6 StatusUnauthorized val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUnauthorized val) : Bool val Parameters \u00b6 that: StatusUnauthorized val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUnauthorized val) : Bool val Parameters \u00b6 that: StatusUnauthorized val Returns \u00b6 Bool val","title":"primitive StatusUnauthorized"},{"location":"http-StatusUnauthorized/#statusunauthorized","text":"[Source] primitive val StatusUnauthorized is Status val","title":"StatusUnauthorized"},{"location":"http-StatusUnauthorized/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusUnauthorized/#constructors","text":"","title":"Constructors"},{"location":"http-StatusUnauthorized/#create","text":"[Source] new val create() : StatusUnauthorized val^","title":"create"},{"location":"http-StatusUnauthorized/#returns","text":"StatusUnauthorized val^","title":"Returns"},{"location":"http-StatusUnauthorized/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusUnauthorized/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusUnauthorized/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusUnauthorized/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusUnauthorized/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusUnauthorized/#eq","text":"[Source] fun box eq( that: StatusUnauthorized val) : Bool val","title":"eq"},{"location":"http-StatusUnauthorized/#parameters","text":"that: StatusUnauthorized val","title":"Parameters"},{"location":"http-StatusUnauthorized/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusUnauthorized/#ne","text":"[Source] fun box ne( that: StatusUnauthorized val) : Bool val","title":"ne"},{"location":"http-StatusUnauthorized/#parameters_1","text":"that: StatusUnauthorized val","title":"Parameters"},{"location":"http-StatusUnauthorized/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusUnavailableForLegalReasons/","text":"StatusUnavailableForLegalReasons \u00b6 [Source] primitive val StatusUnavailableForLegalReasons is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUnavailableForLegalReasons val^ Returns \u00b6 StatusUnavailableForLegalReasons val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUnavailableForLegalReasons val) : Bool val Parameters \u00b6 that: StatusUnavailableForLegalReasons val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUnavailableForLegalReasons val) : Bool val Parameters \u00b6 that: StatusUnavailableForLegalReasons val Returns \u00b6 Bool val","title":"primitive StatusUnavailableForLegalReasons"},{"location":"http-StatusUnavailableForLegalReasons/#statusunavailableforlegalreasons","text":"[Source] primitive val StatusUnavailableForLegalReasons is Status val","title":"StatusUnavailableForLegalReasons"},{"location":"http-StatusUnavailableForLegalReasons/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusUnavailableForLegalReasons/#constructors","text":"","title":"Constructors"},{"location":"http-StatusUnavailableForLegalReasons/#create","text":"[Source] new val create() : StatusUnavailableForLegalReasons val^","title":"create"},{"location":"http-StatusUnavailableForLegalReasons/#returns","text":"StatusUnavailableForLegalReasons val^","title":"Returns"},{"location":"http-StatusUnavailableForLegalReasons/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusUnavailableForLegalReasons/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusUnavailableForLegalReasons/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusUnavailableForLegalReasons/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusUnavailableForLegalReasons/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusUnavailableForLegalReasons/#eq","text":"[Source] fun box eq( that: StatusUnavailableForLegalReasons val) : Bool val","title":"eq"},{"location":"http-StatusUnavailableForLegalReasons/#parameters","text":"that: StatusUnavailableForLegalReasons val","title":"Parameters"},{"location":"http-StatusUnavailableForLegalReasons/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusUnavailableForLegalReasons/#ne","text":"[Source] fun box ne( that: StatusUnavailableForLegalReasons val) : Bool val","title":"ne"},{"location":"http-StatusUnavailableForLegalReasons/#parameters_1","text":"that: StatusUnavailableForLegalReasons val","title":"Parameters"},{"location":"http-StatusUnavailableForLegalReasons/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusUnsupportedMediaType/","text":"StatusUnsupportedMediaType \u00b6 [Source] primitive val StatusUnsupportedMediaType is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUnsupportedMediaType val^ Returns \u00b6 StatusUnsupportedMediaType val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUnsupportedMediaType val) : Bool val Parameters \u00b6 that: StatusUnsupportedMediaType val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUnsupportedMediaType val) : Bool val Parameters \u00b6 that: StatusUnsupportedMediaType val Returns \u00b6 Bool val","title":"primitive StatusUnsupportedMediaType"},{"location":"http-StatusUnsupportedMediaType/#statusunsupportedmediatype","text":"[Source] primitive val StatusUnsupportedMediaType is Status val","title":"StatusUnsupportedMediaType"},{"location":"http-StatusUnsupportedMediaType/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusUnsupportedMediaType/#constructors","text":"","title":"Constructors"},{"location":"http-StatusUnsupportedMediaType/#create","text":"[Source] new val create() : StatusUnsupportedMediaType val^","title":"create"},{"location":"http-StatusUnsupportedMediaType/#returns","text":"StatusUnsupportedMediaType val^","title":"Returns"},{"location":"http-StatusUnsupportedMediaType/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusUnsupportedMediaType/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusUnsupportedMediaType/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusUnsupportedMediaType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusUnsupportedMediaType/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusUnsupportedMediaType/#eq","text":"[Source] fun box eq( that: StatusUnsupportedMediaType val) : Bool val","title":"eq"},{"location":"http-StatusUnsupportedMediaType/#parameters","text":"that: StatusUnsupportedMediaType val","title":"Parameters"},{"location":"http-StatusUnsupportedMediaType/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusUnsupportedMediaType/#ne","text":"[Source] fun box ne( that: StatusUnsupportedMediaType val) : Bool val","title":"ne"},{"location":"http-StatusUnsupportedMediaType/#parameters_1","text":"that: StatusUnsupportedMediaType val","title":"Parameters"},{"location":"http-StatusUnsupportedMediaType/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StatusUseProxy/","text":"StatusUseProxy \u00b6 [Source] primitive val StatusUseProxy is Status val Implements \u00b6 Status val Constructors \u00b6 create \u00b6 [Source] new val create() : StatusUseProxy val^ Returns \u00b6 StatusUseProxy val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U16 val Returns \u00b6 U16 val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: StatusUseProxy val) : Bool val Parameters \u00b6 that: StatusUseProxy val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StatusUseProxy val) : Bool val Parameters \u00b6 that: StatusUseProxy val Returns \u00b6 Bool val","title":"primitive StatusUseProxy"},{"location":"http-StatusUseProxy/#statususeproxy","text":"[Source] primitive val StatusUseProxy is Status val","title":"StatusUseProxy"},{"location":"http-StatusUseProxy/#implements","text":"Status val","title":"Implements"},{"location":"http-StatusUseProxy/#constructors","text":"","title":"Constructors"},{"location":"http-StatusUseProxy/#create","text":"[Source] new val create() : StatusUseProxy val^","title":"create"},{"location":"http-StatusUseProxy/#returns","text":"StatusUseProxy val^","title":"Returns"},{"location":"http-StatusUseProxy/#public-functions","text":"","title":"Public Functions"},{"location":"http-StatusUseProxy/#apply","text":"[Source] fun box apply() : U16 val","title":"apply"},{"location":"http-StatusUseProxy/#returns_1","text":"U16 val","title":"Returns"},{"location":"http-StatusUseProxy/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"http-StatusUseProxy/#returns_2","text":"String val","title":"Returns"},{"location":"http-StatusUseProxy/#eq","text":"[Source] fun box eq( that: StatusUseProxy val) : Bool val","title":"eq"},{"location":"http-StatusUseProxy/#parameters","text":"that: StatusUseProxy val","title":"Parameters"},{"location":"http-StatusUseProxy/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-StatusUseProxy/#ne","text":"[Source] fun box ne( that: StatusUseProxy val) : Bool val","title":"ne"},{"location":"http-StatusUseProxy/#parameters_1","text":"that: StatusUseProxy val","title":"Parameters"},{"location":"http-StatusUseProxy/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-StreamTransfer/","text":"StreamTransfer \u00b6 [Source] primitive val StreamTransfer Constructors \u00b6 create \u00b6 [Source] new val create() : StreamTransfer val^ Returns \u00b6 StreamTransfer val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: StreamTransfer val) : Bool val Parameters \u00b6 that: StreamTransfer val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StreamTransfer val) : Bool val Parameters \u00b6 that: StreamTransfer val Returns \u00b6 Bool val","title":"primitive StreamTransfer"},{"location":"http-StreamTransfer/#streamtransfer","text":"[Source] primitive val StreamTransfer","title":"StreamTransfer"},{"location":"http-StreamTransfer/#constructors","text":"","title":"Constructors"},{"location":"http-StreamTransfer/#create","text":"[Source] new val create() : StreamTransfer val^","title":"create"},{"location":"http-StreamTransfer/#returns","text":"StreamTransfer val^","title":"Returns"},{"location":"http-StreamTransfer/#public-functions","text":"","title":"Public Functions"},{"location":"http-StreamTransfer/#eq","text":"[Source] fun box eq( that: StreamTransfer val) : Bool val","title":"eq"},{"location":"http-StreamTransfer/#parameters","text":"that: StreamTransfer val","title":"Parameters"},{"location":"http-StreamTransfer/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-StreamTransfer/#ne","text":"[Source] fun box ne( that: StreamTransfer val) : Bool val","title":"ne"},{"location":"http-StreamTransfer/#parameters_1","text":"that: StreamTransfer val","title":"Parameters"},{"location":"http-StreamTransfer/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-TransferMode/","text":"TransferMode \u00b6 [Source] type TransferMode is (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val) Type Alias For \u00b6 ( ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)","title":"type TransferMode"},{"location":"http-TransferMode/#transfermode","text":"[Source] type TransferMode is (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)","title":"TransferMode"},{"location":"http-TransferMode/#type-alias-for","text":"( ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)","title":"Type Alias For"},{"location":"http-URL/","text":"URL \u00b6 [Source] Holds the components of a URL. These are always stored as valid, URL-encoded values. class val URL Constructors \u00b6 create \u00b6 [Source] Create an empty URL. new val create() : URL val^ Returns \u00b6 URL val^ build \u00b6 [Source] Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. new val build( from: String val, percent_encoded: Bool val = true) : URL val^ ? Parameters \u00b6 from: String val percent_encoded: Bool val = true Returns \u00b6 URL val^ ? valid \u00b6 [Source] Parse the URL string into its components. If it isn't URL encoded, raise an error. new val valid( from: String val) : URL val^ ? Parameters \u00b6 from: String val Returns \u00b6 URL val^ ? Public fields \u00b6 var scheme: String val \u00b6 [Source] URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also RFC 3986 . var user: String val \u00b6 [Source] URL user as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide user information, this will be the empty string. See also RFC 3986 . var password: String val \u00b6 [Source] URL password as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a password, this will be the empty string. See also RFC 3986 . var host: String val \u00b6 [Source] URL host as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a host, this will be the empty string. See also RFC 3986 . var port: U16 val \u00b6 [Source] URL port as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a port, this will be the empty string. See also RFC 3986 . var path: String val \u00b6 [Source] URL path component. If the URL does not provide a path component, this will be the empty string. See also RFC 3986 . var query: String val \u00b6 [Source] URL query component. If the URL does not provide a query component, this will be the empty string. See also RFC 3986 . var fragment: String val \u00b6 [Source] Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also RFC 3986 . Public Functions \u00b6 is_valid \u00b6 [Source] Return true if all elements are correctly URL encoded. fun box is_valid() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] Combine the components into a string. fun box string() : String iso^ Returns \u00b6 String iso^ join \u00b6 [Source] Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. fun val join( that: URL val) : URL val Parameters \u00b6 that: URL val Returns \u00b6 URL val default_port \u00b6 [Source] Report the default port for our scheme. Returns 0 for unrecognised schemes. fun box default_port() : U16 val Returns \u00b6 U16 val","title":"class URL"},{"location":"http-URL/#url","text":"[Source] Holds the components of a URL. These are always stored as valid, URL-encoded values. class val URL","title":"URL"},{"location":"http-URL/#constructors","text":"","title":"Constructors"},{"location":"http-URL/#create","text":"[Source] Create an empty URL. new val create() : URL val^","title":"create"},{"location":"http-URL/#returns","text":"URL val^","title":"Returns"},{"location":"http-URL/#build","text":"[Source] Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. new val build( from: String val, percent_encoded: Bool val = true) : URL val^ ?","title":"build"},{"location":"http-URL/#parameters","text":"from: String val percent_encoded: Bool val = true","title":"Parameters"},{"location":"http-URL/#returns_1","text":"URL val^ ?","title":"Returns"},{"location":"http-URL/#valid","text":"[Source] Parse the URL string into its components. If it isn't URL encoded, raise an error. new val valid( from: String val) : URL val^ ?","title":"valid"},{"location":"http-URL/#parameters_1","text":"from: String val","title":"Parameters"},{"location":"http-URL/#returns_2","text":"URL val^ ?","title":"Returns"},{"location":"http-URL/#public-fields","text":"","title":"Public fields"},{"location":"http-URL/#var-scheme-string-val","text":"[Source] URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also RFC 3986 .","title":"var scheme: String val"},{"location":"http-URL/#var-user-string-val","text":"[Source] URL user as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide user information, this will be the empty string. See also RFC 3986 .","title":"var user: String val"},{"location":"http-URL/#var-password-string-val","text":"[Source] URL password as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a password, this will be the empty string. See also RFC 3986 .","title":"var password: String val"},{"location":"http-URL/#var-host-string-val","text":"[Source] URL host as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a host, this will be the empty string. See also RFC 3986 .","title":"var host: String val"},{"location":"http-URL/#var-port-u16-val","text":"[Source] URL port as part of the URLs authority component: authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] If the URL does not provide a port, this will be the empty string. See also RFC 3986 .","title":"var port: U16 val"},{"location":"http-URL/#var-path-string-val","text":"[Source] URL path component. If the URL does not provide a path component, this will be the empty string. See also RFC 3986 .","title":"var path: String val"},{"location":"http-URL/#var-query-string-val","text":"[Source] URL query component. If the URL does not provide a query component, this will be the empty string. See also RFC 3986 .","title":"var query: String val"},{"location":"http-URL/#var-fragment-string-val","text":"[Source] Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also RFC 3986 .","title":"var fragment: String val"},{"location":"http-URL/#public-functions","text":"","title":"Public Functions"},{"location":"http-URL/#is_valid","text":"[Source] Return true if all elements are correctly URL encoded. fun box is_valid() : Bool val","title":"is_valid"},{"location":"http-URL/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-URL/#string","text":"[Source] Combine the components into a string. fun box string() : String iso^","title":"string"},{"location":"http-URL/#returns_4","text":"String iso^","title":"Returns"},{"location":"http-URL/#join","text":"[Source] Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. fun val join( that: URL val) : URL val","title":"join"},{"location":"http-URL/#parameters_2","text":"that: URL val","title":"Parameters"},{"location":"http-URL/#returns_5","text":"URL val","title":"Returns"},{"location":"http-URL/#default_port","text":"[Source] Report the default port for our scheme. Returns 0 for unrecognised schemes. fun box default_port() : U16 val","title":"default_port"},{"location":"http-URL/#returns_6","text":"U16 val","title":"Returns"},{"location":"http-URLEncode/","text":"URLEncode \u00b6 [Source] Functions for checking, encoding, and decoding parts of URLs. primitive val URLEncode Constructors \u00b6 create \u00b6 [Source] new val create() : URLEncode val^ Returns \u00b6 URLEncode val^ Public Functions \u00b6 encode \u00b6 [Source] URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true => given string is already at least partially encoded, so '%'s indicate an encoded character. false => given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. fun box encode( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val), percent_encoded: Bool val = true) : String val ? Parameters \u00b6 from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) percent_encoded: Bool val = true Returns \u00b6 String val ? decode \u00b6 [Source] URL decode a string. Raise an error on invalid URL encoded. fun box decode( from: String val) : String val ? Parameters \u00b6 from: String val Returns \u00b6 String val ? check_scheme \u00b6 [Source] Check that the given string is a valid scheme. fun box check_scheme( scheme: String val) : Bool val Parameters \u00b6 scheme: String val Returns \u00b6 Bool val check \u00b6 [Source] Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. fun box check( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val Parameters \u00b6 from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: URLEncode val) : Bool val Parameters \u00b6 that: URLEncode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLEncode val) : Bool val Parameters \u00b6 that: URLEncode val Returns \u00b6 Bool val","title":"primitive URLEncode"},{"location":"http-URLEncode/#urlencode","text":"[Source] Functions for checking, encoding, and decoding parts of URLs. primitive val URLEncode","title":"URLEncode"},{"location":"http-URLEncode/#constructors","text":"","title":"Constructors"},{"location":"http-URLEncode/#create","text":"[Source] new val create() : URLEncode val^","title":"create"},{"location":"http-URLEncode/#returns","text":"URLEncode val^","title":"Returns"},{"location":"http-URLEncode/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLEncode/#encode","text":"[Source] URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true => given string is already at least partially encoded, so '%'s indicate an encoded character. false => given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. fun box encode( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val), percent_encoded: Bool val = true) : String val ?","title":"encode"},{"location":"http-URLEncode/#parameters","text":"from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) percent_encoded: Bool val = true","title":"Parameters"},{"location":"http-URLEncode/#returns_1","text":"String val ?","title":"Returns"},{"location":"http-URLEncode/#decode","text":"[Source] URL decode a string. Raise an error on invalid URL encoded. fun box decode( from: String val) : String val ?","title":"decode"},{"location":"http-URLEncode/#parameters_1","text":"from: String val","title":"Parameters"},{"location":"http-URLEncode/#returns_2","text":"String val ?","title":"Returns"},{"location":"http-URLEncode/#check_scheme","text":"[Source] Check that the given string is a valid scheme. fun box check_scheme( scheme: String val) : Bool val","title":"check_scheme"},{"location":"http-URLEncode/#parameters_2","text":"scheme: String val","title":"Parameters"},{"location":"http-URLEncode/#returns_3","text":"Bool val","title":"Returns"},{"location":"http-URLEncode/#check","text":"[Source] Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. fun box check( from: String val, part: (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)) : Bool val","title":"check"},{"location":"http-URLEncode/#parameters_3","text":"from: String val part: ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Parameters"},{"location":"http-URLEncode/#returns_4","text":"Bool val","title":"Returns"},{"location":"http-URLEncode/#eq","text":"[Source] fun box eq( that: URLEncode val) : Bool val","title":"eq"},{"location":"http-URLEncode/#parameters_4","text":"that: URLEncode val","title":"Parameters"},{"location":"http-URLEncode/#returns_5","text":"Bool val","title":"Returns"},{"location":"http-URLEncode/#ne","text":"[Source] fun box ne( that: URLEncode val) : Bool val","title":"ne"},{"location":"http-URLEncode/#parameters_5","text":"that: URLEncode val","title":"Parameters"},{"location":"http-URLEncode/#returns_6","text":"Bool val","title":"Returns"},{"location":"http-URLPart/","text":"URLPart \u00b6 [Source] type URLPart is (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val) Type Alias For \u00b6 ( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"type URLPart"},{"location":"http-URLPart/#urlpart","text":"[Source] type URLPart is (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"URLPart"},{"location":"http-URLPart/#type-alias-for","text":"( URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)","title":"Type Alias For"},{"location":"http-URLPartFragment/","text":"URLPartFragment \u00b6 [Source] primitive val URLPartFragment Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartFragment val^ Returns \u00b6 URLPartFragment val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartFragment val) : Bool val Parameters \u00b6 that: URLPartFragment val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartFragment val) : Bool val Parameters \u00b6 that: URLPartFragment val Returns \u00b6 Bool val","title":"primitive URLPartFragment"},{"location":"http-URLPartFragment/#urlpartfragment","text":"[Source] primitive val URLPartFragment","title":"URLPartFragment"},{"location":"http-URLPartFragment/#constructors","text":"","title":"Constructors"},{"location":"http-URLPartFragment/#create","text":"[Source] new val create() : URLPartFragment val^","title":"create"},{"location":"http-URLPartFragment/#returns","text":"URLPartFragment val^","title":"Returns"},{"location":"http-URLPartFragment/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLPartFragment/#eq","text":"[Source] fun box eq( that: URLPartFragment val) : Bool val","title":"eq"},{"location":"http-URLPartFragment/#parameters","text":"that: URLPartFragment val","title":"Parameters"},{"location":"http-URLPartFragment/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-URLPartFragment/#ne","text":"[Source] fun box ne( that: URLPartFragment val) : Bool val","title":"ne"},{"location":"http-URLPartFragment/#parameters_1","text":"that: URLPartFragment val","title":"Parameters"},{"location":"http-URLPartFragment/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-URLPartHost/","text":"URLPartHost \u00b6 [Source] primitive val URLPartHost Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartHost val^ Returns \u00b6 URLPartHost val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartHost val) : Bool val Parameters \u00b6 that: URLPartHost val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartHost val) : Bool val Parameters \u00b6 that: URLPartHost val Returns \u00b6 Bool val","title":"primitive URLPartHost"},{"location":"http-URLPartHost/#urlparthost","text":"[Source] primitive val URLPartHost","title":"URLPartHost"},{"location":"http-URLPartHost/#constructors","text":"","title":"Constructors"},{"location":"http-URLPartHost/#create","text":"[Source] new val create() : URLPartHost val^","title":"create"},{"location":"http-URLPartHost/#returns","text":"URLPartHost val^","title":"Returns"},{"location":"http-URLPartHost/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLPartHost/#eq","text":"[Source] fun box eq( that: URLPartHost val) : Bool val","title":"eq"},{"location":"http-URLPartHost/#parameters","text":"that: URLPartHost val","title":"Parameters"},{"location":"http-URLPartHost/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-URLPartHost/#ne","text":"[Source] fun box ne( that: URLPartHost val) : Bool val","title":"ne"},{"location":"http-URLPartHost/#parameters_1","text":"that: URLPartHost val","title":"Parameters"},{"location":"http-URLPartHost/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-URLPartPassword/","text":"URLPartPassword \u00b6 [Source] primitive val URLPartPassword Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartPassword val^ Returns \u00b6 URLPartPassword val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartPassword val) : Bool val Parameters \u00b6 that: URLPartPassword val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartPassword val) : Bool val Parameters \u00b6 that: URLPartPassword val Returns \u00b6 Bool val","title":"primitive URLPartPassword"},{"location":"http-URLPartPassword/#urlpartpassword","text":"[Source] primitive val URLPartPassword","title":"URLPartPassword"},{"location":"http-URLPartPassword/#constructors","text":"","title":"Constructors"},{"location":"http-URLPartPassword/#create","text":"[Source] new val create() : URLPartPassword val^","title":"create"},{"location":"http-URLPartPassword/#returns","text":"URLPartPassword val^","title":"Returns"},{"location":"http-URLPartPassword/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLPartPassword/#eq","text":"[Source] fun box eq( that: URLPartPassword val) : Bool val","title":"eq"},{"location":"http-URLPartPassword/#parameters","text":"that: URLPartPassword val","title":"Parameters"},{"location":"http-URLPartPassword/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-URLPartPassword/#ne","text":"[Source] fun box ne( that: URLPartPassword val) : Bool val","title":"ne"},{"location":"http-URLPartPassword/#parameters_1","text":"that: URLPartPassword val","title":"Parameters"},{"location":"http-URLPartPassword/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-URLPartPath/","text":"URLPartPath \u00b6 [Source] primitive val URLPartPath Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartPath val^ Returns \u00b6 URLPartPath val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartPath val) : Bool val Parameters \u00b6 that: URLPartPath val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartPath val) : Bool val Parameters \u00b6 that: URLPartPath val Returns \u00b6 Bool val","title":"primitive URLPartPath"},{"location":"http-URLPartPath/#urlpartpath","text":"[Source] primitive val URLPartPath","title":"URLPartPath"},{"location":"http-URLPartPath/#constructors","text":"","title":"Constructors"},{"location":"http-URLPartPath/#create","text":"[Source] new val create() : URLPartPath val^","title":"create"},{"location":"http-URLPartPath/#returns","text":"URLPartPath val^","title":"Returns"},{"location":"http-URLPartPath/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLPartPath/#eq","text":"[Source] fun box eq( that: URLPartPath val) : Bool val","title":"eq"},{"location":"http-URLPartPath/#parameters","text":"that: URLPartPath val","title":"Parameters"},{"location":"http-URLPartPath/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-URLPartPath/#ne","text":"[Source] fun box ne( that: URLPartPath val) : Bool val","title":"ne"},{"location":"http-URLPartPath/#parameters_1","text":"that: URLPartPath val","title":"Parameters"},{"location":"http-URLPartPath/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-URLPartQuery/","text":"URLPartQuery \u00b6 [Source] primitive val URLPartQuery Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartQuery val^ Returns \u00b6 URLPartQuery val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartQuery val) : Bool val Parameters \u00b6 that: URLPartQuery val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartQuery val) : Bool val Parameters \u00b6 that: URLPartQuery val Returns \u00b6 Bool val","title":"primitive URLPartQuery"},{"location":"http-URLPartQuery/#urlpartquery","text":"[Source] primitive val URLPartQuery","title":"URLPartQuery"},{"location":"http-URLPartQuery/#constructors","text":"","title":"Constructors"},{"location":"http-URLPartQuery/#create","text":"[Source] new val create() : URLPartQuery val^","title":"create"},{"location":"http-URLPartQuery/#returns","text":"URLPartQuery val^","title":"Returns"},{"location":"http-URLPartQuery/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLPartQuery/#eq","text":"[Source] fun box eq( that: URLPartQuery val) : Bool val","title":"eq"},{"location":"http-URLPartQuery/#parameters","text":"that: URLPartQuery val","title":"Parameters"},{"location":"http-URLPartQuery/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-URLPartQuery/#ne","text":"[Source] fun box ne( that: URLPartQuery val) : Bool val","title":"ne"},{"location":"http-URLPartQuery/#parameters_1","text":"that: URLPartQuery val","title":"Parameters"},{"location":"http-URLPartQuery/#returns_2","text":"Bool val","title":"Returns"},{"location":"http-URLPartUser/","text":"URLPartUser \u00b6 [Source] primitive val URLPartUser Constructors \u00b6 create \u00b6 [Source] new val create() : URLPartUser val^ Returns \u00b6 URLPartUser val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: URLPartUser val) : Bool val Parameters \u00b6 that: URLPartUser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: URLPartUser val) : Bool val Parameters \u00b6 that: URLPartUser val Returns \u00b6 Bool val","title":"primitive URLPartUser"},{"location":"http-URLPartUser/#urlpartuser","text":"[Source] primitive val URLPartUser","title":"URLPartUser"},{"location":"http-URLPartUser/#constructors","text":"","title":"Constructors"},{"location":"http-URLPartUser/#create","text":"[Source] new val create() : URLPartUser val^","title":"create"},{"location":"http-URLPartUser/#returns","text":"URLPartUser val^","title":"Returns"},{"location":"http-URLPartUser/#public-functions","text":"","title":"Public Functions"},{"location":"http-URLPartUser/#eq","text":"[Source] fun box eq( that: URLPartUser val) : Bool val","title":"eq"},{"location":"http-URLPartUser/#parameters","text":"that: URLPartUser val","title":"Parameters"},{"location":"http-URLPartUser/#returns_1","text":"Bool val","title":"Returns"},{"location":"http-URLPartUser/#ne","text":"[Source] fun box ne( that: URLPartUser val) : Bool val","title":"ne"},{"location":"http-URLPartUser/#parameters_1","text":"that: URLPartUser val","title":"Parameters"},{"location":"http-URLPartUser/#returns_2","text":"Bool val","title":"Returns"},{"location":"src/http/client/","text":"use \"collections\" use \"net\" use \"net_ssl\" class HTTPClient \"\"\" Manages a group of HTTP connections on behalf of a client application. A client should create one instance of this class. \"\"\" let _auth: TCPConnectionAuth let _sslctx: SSLContext let _pipeline: Bool let _keepalive_timeout_secs: U32 let _sessions: Map[_HostService, _ClientConnection] = _sessions.create() new create( auth: TCPConnectionAuth, sslctx: (SSLContext | None) = None, pipeline: Bool = true, keepalive_timeout_secs: U32 = 0) => \"\"\" Create the context in which all HTTP sessions will originate. Parameters: - keepalive_timeout_secs: Use TCP Keepalive and check if the other side is down every `keepalive_timeout_secs` seconds. \"\"\" _auth = auth _sslctx = try sslctx as SSLContext else recover let newssl = SSLContext newssl.set_client_verify(false) newssl end end _pipeline = pipeline _keepalive_timeout_secs = keepalive_timeout_secs fun ref apply( request: Payload trn, handlermaker: HandlerFactory val) : Payload val ? => \"\"\" Schedule a request on an HTTP session. If a new connection is created, a new instance of the application's Receive Handler will be created for it. A `val` copy of the `Payload` is returned, and it can not be modified after this point. This is useful in Stream and Chunked transfer modes, so that the application can follow up with calls to `Client.send_body`. \"\"\" let session = _get_session(request.url, handlermaker)? let mode = request.transfer_mode request.session = session let valrequest: Payload val = consume request session(valrequest) valrequest fun ref dispose() => \"\"\" Disposes the sessions and cancels all pending requests. \"\"\" for s in _sessions.values() do s.dispose() end _sessions.clear() /* fun ref cancel(request: Payload val) => \"\"\" Cancel a request. \"\"\" match request.session | let s _ClientConnection tag => s.cancel(request) end */ fun ref _get_session( url: URL, handlermaker: HandlerFactory val) : _ClientConnection ? => \"\"\" Gets or creates an HTTP Session for the given URL. If a new session is created, a new Receive Handler instance is created too. \"\"\" let hs = _HostService(url.scheme, url.host, url.port.string()) try // Look for an existing session _sessions(hs)? else // or create a new session of the correct type. let session = match url.scheme | \"http\" => _ClientConnection(_auth, hs.host, hs.service, None, _pipeline, _keepalive_timeout_secs, handlermaker) | \"https\" => _ClientConnection(_auth, hs.host, hs.service, _sslctx, _pipeline, _keepalive_timeout_secs, handlermaker) else error end _sessions(hs) = session session end fun ref send_body(data: ByteSeq val, session: HTTPSession) => session.write(data) class _SessionGuard \"\"\" Enforces the rule that an 'unsafe' request monopolizes the HTTPSession. A 'safe' request does not modify a resource state on the server, and such a request has no body. \"\"\" let _session: HTTPSession let _sent: List[Payload val] = List[Payload val] var _lastreqsafe: Bool = true var current: (Payload val | None) = None new iso create(session: HTTPSession) => _session = session fun ref submit(request: Payload val) ? => \"\"\" Accept a request for transmission to the server. This will fail if the request is not \"safe\" and the HTTPSession is busy. Due to the possibly large body size, these requests can not be queued. \"\"\" let thisreqsafe = request.is_safe() // If the channel is idle, just send this request. if _sent.size() == 0 then _lastreqsafe = thisreqsafe current = request _session(request) return end // Channel is not idle. But we can send it anyway if // both the last request and this one are safe. if _lastreqsafe and thisreqsafe then _sent.push(request) _session(request) return end // Channel can not accept another request now. error","title":"Client"},{"location":"src/http/common_log/","text":"use \"time\" class CommonLog is Logger \"\"\" Logs HTTP requests in the common log format. \"\"\" let _out: OutStream new val create(out: OutStream) => _out = out fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) => let list = recover Array[String](24) end list.push(ip) list.push(\" - \") list.push(_entry(request.url.user)) try // this one should never fail let time =_log_time()? list.push(\" [\") list.push(time) list.push(\"] \\\"\") end list.push(request.method) list.push(\" \") list.push(request.url.path) if request.url.query.size() > 0 then list.push(\"?\") list.push(request.url.query) end if request.url.fragment.size() > 0 then list.push(\"#\") list.push(request.url.fragment) end list.push(\" \") list.push(request.proto) list.push(\"\\\" \") list.push(response.status.string()) list.push(\" \") list.push(body_size.string()) list.push(\" \\\"\") try list.push(request(\"Referrer\")?) end list.push(\"\\\" \\\"\") try list.push(request(\"User-Agent\")?) end list.push(\"\\\"\\n\") _out.writev(consume list) fun _entry(s: String): String => if s.size() > 0 then s else \"-\" end fun _log_time(): String ? => PosixDate(Time.seconds()).format(\"%d/%b/%Y:%H:%M:%S +0000\")?","title":"Common log"},{"location":"src/http/contents_log/","text":"class ContentsLog is Logger \"\"\" Logs the contents of HTTP requests and responses. \"\"\" let _out: OutStream new val create(out: OutStream) => _out = out fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) => let list = recover Array[ByteSeq] end list.push(\"REQUEST\\n\") list.push(request.method) list.push(\" \") list.push(request.url.path) if request.url.query.size() > 0 then list.push(\"?\") list.push(request.url.query) end if request.url.fragment.size() > 0 then list.push(\"#\") list.push(request.url.fragment) end list.push(\" \") list.push(request.proto) list.push(\"\\n\") for (k, v) in request.headers().pairs() do list.push(k) list.push(\": \") list.push(v) list.push(\"\\n\") end try list.append(request.body()?) end list.push(\"\\n\") list.push(\"RESPONSE\\n\") list.push(response.proto) list.push(\" \") list.push(response.status.string()) list.push(\" \") list.push(response.method) list.push(\"\\n\") for (k, v) in response.headers().pairs() do list.push(k) list.push(\": \") list.push(v) list.push(\"\\n\") end try list.append(response.body()?) end list.push(\"\\n\\n\") _out.writev(consume list)","title":"Contents log"},{"location":"src/http/discard_log/","text":"primitive DiscardLog \"\"\" Doesn't log anything. \"\"\" fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) => None","title":"Discard log"},{"location":"src/http/http_handler/","text":"\"\"\" This package includes all the support functions necessary to build client and server applications for the HTTP protocol. The important interfaces an application needs to deal with are: * [HTTPSession](http-HTTPSession), the API to an HTTP connection. * [HTTPHandler](http-HTTPHandler), the interface to a handler you need to write that will receive notifications from the `HTTPSession`. * [HandlerFactory](http-HandlerFactory), the interface to a class you need to write that creates instances of your `HTTPHandler`. * [Payload](http-Payload), the class that represents a single HTTP message, with its headers. If you are writing a client, you will need to deal with the [HTTPClient](http-HTTPClient) class. If you are writing a server, you will need to deal with the [HTTPServer](http-HTTPServer) class. \"\"\" primitive AuthFailed \"\"\" HTTP failure reason for when SSL Authentication failed. This failure reason is only reported to HTTP client HTTPHandler instances. \"\"\" primitive ConnectionClosed \"\"\" HTTP failure reason for when the connection was closed either from the other side (detectable when using TCP keepalive) or locally (e.g. due to an error). \"\"\" primitive ConnectFailed \"\"\" HTTP failure reason for when a connection could not be established. This failure reason is only valid for HTTP client HTTPHandlers. \"\"\" type HTTPFailureReason is ( AuthFailed | ConnectionClosed | ConnectFailed ) \"\"\" HTTP failure reason reported to `HTTPHandler.failed()`. \"\"\" interface HTTPHandler \"\"\" This is the interface through which HTTP messages are delivered *to* application code. On the server, this will be HTTP Requests (GET, HEAD, DELETE, POST, etc) sent from a client. On the client, this will be the HTTP Responses coming back from the server. The protocol is largely symmetrical and the same interface definition is used, though what processing happens behind the interface will of course vary. This interface delivers asynchronous events when receiving an HTTP message (called a `Payload`). Calls to these methods are made in the context of the `HTTPSession` actor so most of them should be passing data on to a processing actor. Each `HTTPSession` must have a unique instance of the handler. The application code does not necessarily know when an `HTTPSession` is created, so the application must provide an instance of `HandlerFactory` that will be called at the appropriate time. \"\"\" fun ref apply(payload: Payload val): Any => \"\"\" Notification of an incoming message. On the client, these will be responses coming from the server. On the server these will be requests coming from the client. The `Payload` object carries HTTP headers and the method, URL, and status codes. Only one HTTP message will be processed at a time, and that starts with a call to this method. This would be a good time to create an actor to deal with subsequent information pertaining to this message. \"\"\" fun ref chunk(data: ByteSeq val) => \"\"\" Notification of incoming body data. The body belongs to the most recent `Payload` delivered by an `apply` notification. \"\"\" fun ref finished() => \"\"\" Notification that no more body chunks are coming. Delivery of this HTTP message is complete. \"\"\" fun ref cancelled() => \"\"\" Notification that transferring the payload has been cancelled locally, e.g. by disposing the client, closing the server or manually cancelling a single request. \"\"\" fun ref failed(reason: HTTPFailureReason) => \"\"\" Notification about failure to transfer the payload (e.g. connection could not be established, authentication failed, connection was closed prematurely, ...) \"\"\" fun ref throttled() => \"\"\" Notification that the session temporarily can not accept more data. \"\"\" fun ref unthrottled() => \"\"\" Notification that the session can resume accepting data. \"\"\" fun ref need_body() => \"\"\" Notification that the HTTPSession is ready for Stream or Chunked body data. \"\"\" interface HandlerFactory \"\"\" The TCP connections that underlie HTTP sessions get created within the `http` package at times that the application code can not predict. Yet, the application code has to provide custom hooks into these connections as they are created. To accomplish this, the application code provides an instance of a `class` that implements this interface. The `HandlerFactory.apply` method will be called when a new `HTTPSession` is created, giving the application a chance to create an instance of its own `HTTPHandler`. This happens on both client and server ends. \"\"\" fun apply(session: HTTPSession): HTTPHandler ref^ \"\"\" Called by the `HTTPSession` when it needs a new instance of the application's `HTTPHandler`. It is suggested that the `session` value be passed to the constructor for the new `HTTPHandler` so that it is available for making `throttle` and `unthrottle` calls. \"\"\"","title":"Http handler"},{"location":"src/http/http_parser/","text":"use \"buffered\" use \"net\" use \"encode/base64\" // The parser internal state indicates what it expects to see next // in the input stream. primitive _ExpectRequest primitive _ExpectResponse primitive _ExpectHeaders primitive _ExpectContentLength primitive _ExpectChunkStart primitive _ExpectChunk primitive _ExpectChunkEnd primitive _ExpectBody primitive _ExpectReady primitive _ExpectError type _PayloadState is ( _ExpectRequest // Request method and URL | _ExpectResponse // Response status | _ExpectHeaders // More headers | _ExpectContentLength // Body text, limited by Content-Length | _ExpectChunkStart // The start of a 'chunked' piece of body text | _ExpectChunk // More of a continuing body 'chunk' | _ExpectChunkEnd // The CRLF at the end of a 'chunk' | _ExpectBody // Any body, which might not be there | _ExpectReady // All done with the message | _ExpectError // Not valid HTTP format ) primitive ParseError class HTTPParser \"\"\" This is the HTTP parser that builds a message `Payload` object representing either a Request or a Response from received chunks of data. \"\"\" let _client: Bool let _session: HTTPSession var _state: _PayloadState // Parser state var _payload: Payload iso // The Payload under construction var _expected_length: USize = 0 var _transfer_mode: TransferMode = OneshotTransfer var _chunk_end: Bool = false var _delivered: Bool = false new request(session': HTTPSession) => \"\"\" Expect HTTP requests to arrive on a session. \"\"\" _client = false _session = session' _payload = Payload.request() _expected_length = 0 _transfer_mode = OneshotTransfer _chunk_end = false _state = _ExpectRequest new response(session': HTTPSession) => \"\"\" Expect HTTP responses to arrive on a session. \"\"\" _client = true _session = session' _payload = Payload.response() _expected_length = 0 _transfer_mode = OneshotTransfer _chunk_end = false _state = _ExpectResponse fun ref parse(buffer: Reader): (ParseError | None) => \"\"\" Analyze new data based on the parser's current internal state. \"\"\" match _state | _ExpectRequest => _parse_request(buffer) | _ExpectResponse => _parse_response(buffer) | _ExpectHeaders => _parse_headers(buffer) | _ExpectBody => // We are expecting a message body. Now we decide exactly // which encoding to look for. match _transfer_mode | ChunkedTransfer => _state = _ExpectChunkStart _parse_chunk_start(buffer) else _state = _ExpectContentLength _parse_content_length(buffer) end | _ExpectChunkStart => _parse_chunk_start(buffer) | _ExpectChunk => _parse_chunk(buffer) | _ExpectChunkEnd => _parse_chunk_end(buffer) | _ExpectContentLength => _parse_content_length(buffer) end fun ref _deliver() => \"\"\" The parser is finished with the message headers so we can push it to the `HTTPSession`. The body may come later. \"\"\" let body_follows = match _payload.transfer_mode | ChunkedTransfer => true else (_expected_length > 0) end // Set up `_payload` for the next message. let payload = _payload = Payload._empty(_client) _session._deliver(consume payload) if not body_follows then restart() end fun ref restart() => \"\"\" Restart parser state for the next message. It will be of the same kind as the last one. \"\"\" _expected_length = 0 _transfer_mode = OneshotTransfer _chunk_end = false _state = if _client then _ExpectResponse else _ExpectRequest end fun ref closed(buffer: Reader) => \"\"\" The connection has closed, which may signal that all remaining data is the payload body. \"\"\" if _state is _ExpectBody then _expected_length = buffer.size() try let bytes = buffer.block(_expected_length)? let chunk: ByteSeq = recover val consume bytes end match _payload.transfer_mode | OneshotTransfer => _payload.add_chunk(chunk) else _session._chunk(chunk) end _state = _ExpectReady end end fun ref _parse_request(buffer: Reader): (ParseError | None) => \"\"\" Look for \"<Method> <URL> <Proto>\", the first line of an HTTP 'request' message. \"\"\" // Reset expectations _expected_length = 0 _transfer_mode = OneshotTransfer _payload.session = _session try let line = buffer.line()? let method_end = line.find(\" \")? _payload.method = line.substring(0, method_end) let url_end = line.find(\" \", method_end + 1)? _payload.url = URL.valid(line.substring(method_end + 1, url_end))? _payload.proto = line.substring(url_end + 1) _state = _ExpectHeaders parse(buffer) else ParseError end fun ref _parse_response(buffer: Reader): (ParseError | None) => \"\"\" Look for \"<Proto> <Code> <Description>\", the first line of an HTTP 'response' message. \"\"\" // Reset expectations _expected_length = 0 _transfer_mode = OneshotTransfer _payload.session = _session try let line = buffer.line()? let proto_end = line.find(\" \")? _payload.proto = line.substring(0, proto_end) _payload.status = line.read_int[U16](proto_end + 1)?._1 let status_end = line.find(\" \", proto_end + 1)? _payload.method = line.substring(status_end + 1) _state = _ExpectHeaders parse(buffer) else ParseError end fun ref _parse_headers(buffer: Reader): (ParseError | None) => \"\"\" Look for: \"<Key>:<Value>\" or the empty line that marks the end of all the headers. \"\"\" while true do // Try to get another line out of the available buffer. // If this fails it is not a syntax error; we just wait for more. try let line = buffer.line()? if line.size() == 0 then // An empty line marks the end of the headers. Set state // appropriately. _set_header_end() // deliver for empty responses, chunked or streamed transfer // accumulate the body in the Payload for OneshotTransfer match _payload.transfer_mode | OneshotTransfer if _state isnt _ExpectBody => _deliver() | StreamTransfer => _deliver() | ChunkedTransfer => _deliver() end parse(buffer) else // A non-empty line *must* be a header. error if not. try _process_header(consume line)? else _state = _ExpectError break end end // line-size check else // Failed to get a line. We stay in _ExpectHeader state. return end // try end // looping over all headers in this buffer // Breaking out of that loop means an error. if _state is _ExpectError then ParseError end fun ref _process_header(line: String) ? => \"\"\" Save a header value. Raise an error on not finding the colon or can't interpret the value. \"\"\" let i = line.find(\":\")? let key = line.substring(0, i) key.strip() let key2: String val = consume key let value = line.substring(i + 1) value.strip() let value2: String val = consume value // Examine certain headers describing the encoding. match key2.lower() | \"content-length\" => // Explicit body length. _expected_length = value2.read_int[USize]()?._1 // On the receiving end, there is no difference // between Oneshot and Stream transfers except how // we store it. TODO eliminate this? _transfer_mode = if _expected_length > 10_000 then StreamTransfer else OneshotTransfer end _payload.transfer_mode = _transfer_mode | \"transfer-encoding\" => // Incremental body lengths. try value2.find(\"chunked\")? _transfer_mode = ChunkedTransfer _payload.transfer_mode = _transfer_mode else _state = _ExpectError end | \"Host\" => // TODO: set url host and service None | \"authorization\" => _setauth(value2) end // match certain headers _payload(key2) = value2 fun ref _setauth(auth: String) => \"\"\" Fill in username and password from an authentication header. \"\"\" try let parts = auth.split(\" \") let authscheme = parts(0)? match authscheme.lower() | \"basic\" => let autharg = parts(1)? let userpass = Base64.decode[String iso](autharg)? let uparts = userpass.split(\":\") _payload.username = uparts(0)? _payload.password = uparts(1)? end end fun ref _set_header_end() => \"\"\" Line size is zero, so we have reached the end of the headers. Certain status codes mean there is no body. \"\"\" if (_payload.status == 204) // no content or (_payload.status == 304) // not modified or ((_payload.status > 0) and (_payload.status < 200)) then _state = _ExpectReady else // If chunked mode or length>0 then some body data will follow. // In any case we can pass the completed `Payload` on to the // session for processing. _state = match _payload.transfer_mode | ChunkedTransfer => _ExpectChunkStart else if _expected_length == 0 then _ExpectReady else _ExpectBody end end end // else no special status fun ref _parse_content_length(buffer: Reader) => \"\"\" Look for `_expected_length` bytes set by having seen a `Content-Length` header. We may not see it all at once but we process the lesser of what we need and what is available in the buffer. \"\"\" let available = buffer.size() let usable = available.min(_expected_length) try let bytes = buffer.block(usable)? let body = recover val consume bytes end _expected_length = _expected_length - usable // in streaming mode we already have a new unrelated payload in _payload // so we need to keep track of the current transfer-mode via _transfer_mode match _transfer_mode | OneshotTransfer => // in oneshot transfer we actually fill the body of the payload _payload.add_chunk(body) else _session._chunk(body) end // All done with this message if we have processed the entire body. if _expected_length == 0 then match _transfer_mode | OneshotTransfer => // we have all the body, finally deliver it _deliver() else // explicitly finish the session in chunked and stream mode _session._finish() end restart() end end fun ref _parse_chunk_start(buffer: Reader): (ParseError | None) => \"\"\" Look for the beginning of a chunk, which is a length in hex on a line terminated by CRLF. An explicit length of zero marks the end of the entire chunked message body. \"\"\" let line = try buffer.line()? else return ParseError end if line.size() > 0 then // This should be the length of the next chunk. _expected_length = try line.read_int[USize](0, 16)?._1 else return ParseError end // A chunk explicitly of length zero marks the end of the body. if _expected_length > 0 then _state = _ExpectChunk else // We already have the CRLF after the zero, so we are all done. _session._finish() restart() end parse(buffer) else // Anything other than a length is an error. _expected_length = 0 _state = _ExpectError ParseError end fun ref _parse_chunk(buffer: Reader) => \"\"\" Look for a chunk of the size set by `_parse_chunk_start`. We may not see it all at once but we process the lesser of what we need and what is available in the buffer. ChunkedTransfer mode always delivers directly to the HTTPSession handler. \"\"\" let available = buffer.size() let usable = available.min(_expected_length) try let chunk = buffer.block(usable)? _session._chunk(consume chunk) _expected_length = _expected_length - usable // If we have all of the chunk, look for the trailing CRLF. // Otherwise we will keep working on this chunk. if _expected_length == 0 then _state = _ExpectChunkEnd parse(buffer) end end fun ref _parse_chunk_end(buffer: Reader) => \"\"\" Look for the CRLF that ends every chunk. AFter that we look for the next chunk, or that was the special ending chunk. \"\"\" try let line = buffer.line()? if _chunk_end then _session._finish() restart() else _state = _ExpectChunkStart parse(buffer) end end /* Saved for debugging. fun ref _say() => match _state | _ExpectRequest => Debug.out(\"-Request method and URL\") | _ExpectResponse => Debug.out(\"-Response status\") | _ExpectHeaders => Debug.out(\"-More headers\") | _ExpectContentLength => Debug.out(\"-Body text, limited by Content-Length\") | _ExpectChunkStart => Debug.out(\"-The start of a 'chunked' piece of body text\") | _ExpectChunk => Debug.out(\"-More of a continuing body 'chunk'\") | _ExpectChunkEnd => Debug.out(\"-The CRLF at the end of a 'chunk'\") | _ExpectBody => Debug.out(\"-Any body, which might not be there\") | _ExpectReady => Debug.out(\"-All done with the message\") | _ExpectError => Debug.out(\"-Not valid HTTP format\") end */","title":"Http parser"},{"location":"src/http/http_session/","text":"interface tag HTTPSession \"\"\" An HTTP Session is the external API to the communication link between client and server. A session can only transfer one message at a time in each direction. The client and server each have their own ways of implementing this interface, but to application code (either in the client or in the server 'back end') this interface provides a common view of how information is passed *into* the `http` package. \"\"\" be apply(payload: Payload val) \"\"\" Start sending a request or response. The `Payload` must have all its essential fields filled in at this point, because ownership is being transferred to the session actor. This begins an outbound message. \"\"\" be finish() \"\"\" Indicate that all *outbound* `add_chunk` calls have been made and submission of the HTTP message is complete. \"\"\" be dispose() \"\"\" Close the connection from this end. \"\"\" be write(data: ByteSeq val) \"\"\" Write raw byte stream to the outbound TCP connection. \"\"\" be _mute() \"\"\" Stop delivering *incoming* data to the handler. This may not be effective instantly. \"\"\" be _unmute() \"\"\" Resume delivering incoming data to the handler. \"\"\" be cancel(msg: Payload val) \"\"\" Tell the session to stop sending an *outbound* message. \"\"\" be _deliver(payload: Payload val) \"\"\" The appropriate Payload Builder will call this from the `TCPConnection` actor to start delivery of a new *inbound* message. If the `Payload`s `transfer_mode` is `OneshotTransfer`, this is the only notification that will happen for the message. Otherwise there will be one or more `_chunk` calls followed by a `_finish` call. \"\"\" be _chunk(data: ByteSeq val) \"\"\" Deliver a piece of *inbound* body data to the application `HTTPHandler` This is called by the PayloadBuilder. \"\"\" be _finish() \"\"\" Inidcates that the last *inbound* body chunk has been sent to `_chunk`. This is called by the PayloadBuilder. \"\"\"","title":"Http session"},{"location":"src/http/mimetypes/","text":"primitive MimeTypes \"\"\" Provide mapping from file names to MIME types. TODO load from /etc/mime.types \"\"\" fun apply(name: String): String val^ => \"\"\" Mapping is based on the file type, following the last period in the name. \"\"\" try // This will fail if no period is found. let dotpos = (name.rfind(\".\", -1, 0)? + 1).usize() match name.trim(dotpos).lower() | \"html\" => \"text/html\" | \"jpg\" => \"image/jpeg\" | \"jpeg\" => \"image/jpeg\" | \"png\" => \"image/png\" | \"css\" => \"text/css\" | \"ico\" => \"image/x-icon\" | \"js\" => \"application/javascript\" | \"mp3\" => \"audio/mpeg3\" | \"m3u\" => \"audio/mpegurl\" | \"ogg\" => \"audio/ogg\" | \"doc\" => \"application/msword\" | \"gif\" => \"image/gif\" | \"txt\" => \"text/plain\" | \"wav\" => \"audio/wav\" else \"application/octet-stream\" // None of the above end else \"application/octet-stream\" // No filetype end","title":"Mimetypes"},{"location":"src/http/payload/","text":"use \"collections\" use \"net\" use \"format\" primitive ChunkedTransfer primitive StreamTransfer primitive OneshotTransfer type TransferMode is (ChunkedTransfer | StreamTransfer | OneshotTransfer) class trn Payload \"\"\" This class represent a single HTTP message, which can be either a `request` or a `response`. ### Transfer Modes HTTP provides two ways to encode the transmission of a message 'body', of any size. This package supports both of them: 2. **StreamTransfer**. This is used for payload bodies where the exact length is known in advance, including most transfers of files. It is selected by calling `Payload.set_length` with an integer bytecount. Appication buffer sizes determine how much data is fed to the TCP connection at once, but the total amount must match this size. 3. **ChunkedTransfer**. This is used when the payload length can not be known in advance, but can be large. It is selected by calling `Payload.set_length` with a parameter of `None`. On the TCP link this mode can be detected because there is no `Content-Length` header at all, being replaced by the `Transfer-Encoding: chunked` header. In addition, the message body is separated into chunks, each with its own bytecount. As with `StreamTransfer` mode, transmission can be spread out over time with the difference that it is the original data source that determines the chunk size. If `Payload.set_length` is never called at all, a variation on `StreamTransfer` called `OneshotTransfer` is used. In this case, all of the message body is placed into the message at once, using `Payload.add_chunk` calls. The size will be determined when the message is submitted for transmission. Care must be taken not to consume too much memory, especially on a server where there can be multiple messages in transit at once. The type of transfer being used by an incoming message can be determined from its `transfer_mode` field, which will be one of the [TransferMode](http-TransferMode) types. ### Sequence For example, to send a message of possibly large size: 1. Create the message with a call to `Payload.request` or `Payload.response`. 2. Set the `session` field of the message. 2. Call `Payload.set_length` to indicate the length of the body. 3. Add any additional headers that may be required, such as `Content-type`. 4. Submit the message for transmission by calling the either the `HTTPSession.apply` method (in servers) or the `HTTPCLient.apply` method in clients. 5. Wait for the `send_body` notification. 6. Make any number of calls to `Payload.send_chunk`. 7. Call `Payload.finish`. To send a message of small, reasonable size (say, under 20KB), this simplified method can be used instead: 1. Create the message with a call to `Payload.request` or `Payload.response`. 2. Set the `session` field of the message. 3. Add any additional headers that may be required, such as `Content-type`. 4. Call `add_chunk` one or more times to add body data. 4. Submit the message for transmission by calling the either the [HTTPSession](http-HTTPSession)`.apply` method (in servers) or the [HTTPClient](http-HTTPClient)`.apply` method in clients. \"\"\" var proto: String = \"HTTP/1.1\" \"\"\"The HTTP protocol string\"\"\" var status: U16 \"\"\" Internal representation of the response [Status](http-Status). Will be `0` for HTTP requests. \"\"\" var method: String \"\"\" The HTTP Method. `GET`, `POST`, `DELETE`, `OPTIONS`, ... For HTTP responses this will be the status string, for a `200` status this will be `200 OK`, for `404`, `404 Not Found` etc.. \"\"\" var url: URL \"\"\" The HTTP request [URL](http-URL). It will be used for the HTTP path and the `Host` header. The `user` and `password` fields are ignored. For HTTP responses this will be an empty [URL](http-URL). \"\"\" var _body_length: USize = 0 var transfer_mode: TransferMode = OneshotTransfer \"\"\" Determines the transfer mode of this message. In case of outgoing requests or responses, use `set_length` to control the transfer mode. In case of incoming requests, this field determines how the request is transferred. \"\"\" var session: (HTTPSession | None) = None embed _headers: Map[String, String] = _headers.create() embed _body: Array[ByteSeq val] = _body.create() let _response: Bool var username: String = \"\" \"\"\" The username extracted from an `Authentication` header of an HTTP request received via [HTTPServer](http-HTTPServer). This is not used and not sent using [HTTPClient](http-HTTPClient), use `update` to set an `Authentication` header instead. \"\"\" var password: String = \"\" \"\"\" The password extracted from an `Authentication` header of an HTTP request received via [HTTPServer](http-HTTPServer). This is not used and not sent using [HTTPClient](http-HTTPClient), use `update` to set an `Authentication` header instead. \"\"\" new iso request(method': String = \"GET\", url': URL = URL) => \"\"\" Create an HTTP `request` message. \"\"\" status = 0 method = method' url = url' _response = false new iso response(status': Status = StatusOK) => \"\"\" Create an HTTP `response` message. \"\"\" status = status'() method = status'.string() url = URL _response = true new iso _empty(response': Bool = true) => \"\"\" Create an empty HTTP payload. \"\"\" status = 0 method = \"\" url = URL _response = response' fun apply(key: String): String ? => \"\"\" Get a header. \"\"\" _headers(key)? fun is_safe(): Bool => \"\"\" A request method is \"safe\" if it does not modify state in the resource. These methods can be guaranteed not to have any body data. Return true for a safe request method, false otherwise. \"\"\" match method | \"GET\" | \"HEAD\" | \"OPTIONS\" => true else false end fun body(): this->Array[ByteSeq] ? => \"\"\" Get the body in `OneshotTransfer` mode. In the other modes it raises an error. \"\"\" match transfer_mode | OneshotTransfer => _body else error end fun ref set_length(bytecount: (USize | None)) => \"\"\" Set the body length when known in advance. This determines the transfer mode that will be used. A parameter of 'None' will use Chunked Transfer Encoding. A numeric value will use Streamed transfer. Not calling this function at all will use Oneshot transfer. \"\"\" match bytecount | None => transfer_mode = ChunkedTransfer _headers(\"Transfer-Encoding\") = \"chunked\" | let n: USize => try not _headers.contains(\"Content-Length\") then _headers(\"Content-Length\") = n.string() end _body_length = n transfer_mode = StreamTransfer end fun ref update(key: String, value: String): Payload ref^ => \"\"\" Set any header. If we've already received the header, append the value as a comma separated list, as per RFC 2616 section 4.2. \"\"\" match _headers(key) = value | let prev: String => _headers(key) = prev + \",\" + value end this fun headers(): this->Map[String, String] => \"\"\" Get all the headers. \"\"\" _headers fun body_size(): (USize | None) => \"\"\" Get the total intended size of the body. `ServerConnection` accumulates actual size transferred for logging. \"\"\" match transfer_mode | ChunkedTransfer => None else _body_length end fun ref add_chunk(data: ByteSeq val): Payload ref^ => \"\"\" This is how application code adds data to the body in `OneshotTransfer` mode. For large bodies, call `set_length` and use `send_chunk` instead. \"\"\" _body.push(data) _body_length = _body_length + data.size() this fun box send_chunk(data: ByteSeq val) => \"\"\" This is how application code sends body data in `StreamTransfer` and `ChunkedTransfer` modes. For smaller body lengths, `add_chunk` in `Oneshot` mode can be used instead. \"\"\" match session | let s: HTTPSession => match transfer_mode | ChunkedTransfer => // Wrap some body data in the Chunked Transfer Encoding format, // which is the length in hex, the data, and a CRLF. It is // important to never send a chunk of length zero, as that is // how the end of the body is signalled. s.write(Format.int[USize](data.size(), FormatHexBare)) s.write(\"\\r\\n\") s.write(data) s.write(\"\\r\\n\") | StreamTransfer => // In stream mode just send the data. Its length should have // already been accounted for by `set_length`. s.write(data) end end fun val finish() => \"\"\" Mark the end of body transmission. This does not do anything, and is unnecessary, in Oneshot mode. \"\"\" match session | let s: HTTPSession => match transfer_mode | ChunkedTransfer => s.write(\"0\\r\\n\\r\\n\") s.finish() | StreamTransfer => s.finish() end end fun val respond(response': Payload) => \"\"\" Start sending a response from the server to the client. \"\"\" try (session as HTTPSession)(consume response') end fun val _client_fail() => \"\"\" Start sending an error response. \"\"\" None /* Not sure if we need this. Nobody calls it. But something like: try (session as HTTPSession)( Payload.response(StatusInternalServerError)) end */ fun val _write(keepalive: Bool = true, conn: TCPConnection tag) => \"\"\" Writes the payload to an HTTPSession. Requests and Responses differ only in the first line of text - everything after that is the same format. \"\"\" if _response then _write_response(keepalive, conn) else _write_request(keepalive, conn) end _write_common(conn) fun val _write_request(keepalive: Bool, conn: TCPConnection tag) => \"\"\" Writes the 'request' parts of an HTTP message. \"\"\" conn.write(method + \" \" + url.path) if url.query.size() > 0 then conn.write(\"?\" + url.query) end if url.fragment.size() > 0 then conn.write(\"#\" + url.fragment) end conn.write(\" \" + proto + \"\\r\\n\") if not keepalive then conn.write(\"Connection: close\\r\\n\") end if url.port == url.default_port() then conn.write(\"Host: \" + url.host + \"\\r\\n\") else conn.write(\"Host: \" + url.host + \":\" + url.port.string() + \"\\r\\n\") end fun val _write_common(conn: TCPConnection tag) => \"\"\" Writes the parts of an HTTP message common to both requests and responses. \"\"\" _write_headers(conn) // In oneshot mode we send the entire stored body. if transfer_mode is OneshotTransfer then for piece in _body.values() do conn.write(piece) end end fun val _write_response(keepalive: Bool, conn: TCPConnection tag) => \"\"\" Write the response-specific parts of an HTTP message. This is the status line, consisting of the protocol name, the status value, and a string representation of the status (carried in the `method` field). Since writing it out is an actor behavior call, we go to the trouble of packaging it into a single string before sending. \"\"\" let statusline = recover String(proto.size() + status.string().size() + method.size() + 4) end statusline .> append(proto) .> append(\" \") .> append(status.string()) .> append(\" \") .> append(method) .> append(\"\\r\\n\") conn.write(consume statusline) if keepalive then conn.write(\"Connection: keep-alive\\r\\n\") end fun _write_headers(conn: TCPConnection tag) => \"\"\" Write all of the HTTP headers to the comm link. \"\"\" var saw_length: Bool = false for (k, v) in _headers.pairs() do if (k != \"Host\") then if k == \"Content-Length\" then saw_length = true end conn.write(k + \": \" + v + \"\\r\\n\") end end if (not saw_length) and (transfer_mode is OneshotTransfer) then conn.write(\"Content-Length: \" + _body_length.string() + \"\\r\\n\") end // Blank line before the body. conn.write(\"\\r\\n\") fun box has_body(): Bool => \"\"\" Determines whether a message has a body portion. \"\"\" if _response then // Errors never have bodies. if (status == 204) // no content or (status == 304) // not modified or ((status > 0) and (status < 200)) or (status > 400) then false else true end else match transfer_mode | ChunkedTransfer => true else (_body_length > 0) end end","title":"Payload"},{"location":"src/http/server/","text":"use \"collections\" use \"net\" use \"net_ssl\" actor HTTPServer \"\"\" Runs an HTTP server. ### Server operation Information flow into the Server is as follows: 1. `Server` listens for incoming TCP connections. 2. `RequestBuilder` is the notification class for new connections. It creates a `ServerConnection` actor and receives all the raw data from TCP. It uses the `HTTPParser` to assemble complete `Payload` objects which are passed off to the `ServerConnection`. 3. The `ServerConnection` actor deals with *completely formed* requests that have been parsed by the `HTTPParser`. This is where requests get dispatched to the caller-provided Handler. With streaming content, dispatch to the application's back end Handler has to happen *before* all of the body has been received. This has to be carefully choreographed because a `Payload` is an `iso` object and can only belong to one actor at a time, yet the `RequestBuilder` is running within the `TCPConnection` actor while the `RequestHandler` is running under the `ServerConnection` actor. Each incoming bufferful of body data, a `ByteSeq val`, is handed off to `ServerConnection`, to be passed on to the back end Handler. 1. It turns out that the issues in sending a request and a response are the same, as are the issues in receiving them. Therefore the same notification interface, `HTTPHandler` is used on both ends, and the same sending interface `HTTPSession` is used. This makes the code easier to read as well. 1. `HTTPHandler.apply()` will be the way the client/server is informed of a new response/request message. All of the headers will be present so that the request can be dispatched for correct processing. Subsequent calls to a new function `HTTPHandler.chunk` will provide the body data, if any. This stream will be terminated by a call to the new function `HTTPHandler.finished`. 2. Pipelining of requests is to optimize the transmission of requests over slow links (such as over satellites), not to cause simultaneous execution on the server within one session. Multiple received simple requests (`GET`, `HEAD`, and `OPTIONS`) are queued in the server and passed to the back end application one at a time. If a client wants true parallel execution of requests, it should use multiple sessions (which many browsers actually do already). Since processing of a streaming response can take a relatively long time, acting on additional requests in the meantime does nothing but use up memory since responses would have to be queued. And if the server is being used to stream media, it is possible that these additional requests will themselves generate large responses. Instead we will just let the requests queue up until a maximum queue length is reached (a small number) at which point we will back-pressure the inbound TCP stream. \"\"\" let _notify: ServerNotify var _handler_maker: HandlerFactory val var _logger: Logger let _reversedns: (DNSLookupAuth | None) let _sslctx: (SSLContext | None) let _listen: TCPListener var _address: NetAddress var _dirty_routes: Bool = false let _sessions: SetIs[TCPConnection tag] = SetIs[TCPConnection tag] new create(auth: TCPListenerAuth, notify: ServerNotify iso, handler: HandlerFactory val, logger: Logger = DiscardLog, host: String = \"\", service: String = \"0\", limit: USize = 0, sslctx: (SSLContext | None) = None, reversedns: (DNSLookupAuth | None) = None) => \"\"\" Create a server bound to the given host and service. To do this we listen for incoming TCP connections, with a notification handler that will create a server session actor for each one. \"\"\" _notify = consume notify _handler_maker = handler _logger = logger _reversedns = reversedns _sslctx = sslctx _listen = TCPListener(auth, _ServerListener(this, sslctx, _handler_maker, _logger, _reversedns), host, service, limit) _address = recover NetAddress end be register_session(conn: TCPConnection) => _sessions.set(conn) be unregister_session(conn: TCPConnection) => _sessions.unset(conn) be set_handler(handler: HandlerFactory val) => \"\"\" Replace the request handler. \"\"\" _handler_maker = handler _listen.set_notify( _ServerListener(this, _sslctx, _handler_maker, _logger, _reversedns)) be set_logger(logger: Logger) => \"\"\" Replace the logger. \"\"\" _logger = logger _listen.set_notify( _ServerListener(this, _sslctx, _handler_maker, _logger, _reversedns)) be dispose() => \"\"\" Shut down the server gracefully. To do this we have to eliminate and source of further inputs. So we stop listening for new incoming TCP connections, and close any that still exist. \"\"\" _listen.dispose() for conn in _sessions.values() do conn.dispose() end fun local_address(): NetAddress => \"\"\" Returns the locally bound address. \"\"\" _address be _listening(address: NetAddress) => \"\"\" Called when we are listening. \"\"\" _address = address _notify.listening(this) be _not_listening() => \"\"\" Called when we fail to listen. \"\"\" _notify.not_listening(this) be _closed() => \"\"\" Called when we stop listening. \"\"\" _notify.closed(this)","title":"Server"},{"location":"src/http/server_notify/","text":"interface val Logger \"\"\" Handles logging request/response pairs. \"\"\" fun val apply( ip: String, body_size: USize, request: Payload val, response: Payload val) : Any => \"\"\" Called after the server has handled a request. \"\"\" interface ServerNotify \"\"\" Notifications about the creation and closing of `TCPConnection`s within HTTP servers. \"\"\" fun ref listening(server: HTTPServer ref) => \"\"\" Called when we are listening. \"\"\" None fun ref not_listening(server: HTTPServer ref) => \"\"\" Called when we fail to listen. \"\"\" None fun ref closed(server: HTTPServer ref) => \"\"\" Called when we stop listening. \"\"\" None","title":"Server notify"},{"location":"src/http/status/","text":"trait val Status fun apply(): U16 fun string(): String primitive StatusContinue is Status fun apply(): U16 => 100 fun string(): String => \"100 Continue\" primitive StatusSwitchingProtocols is Status fun apply(): U16 => 101 fun string(): String => \"101 Switching Protocols\" primitive StatusOK is Status fun apply(): U16 => 200 fun string(): String => \"200 OK\" primitive StatusCreated is Status fun apply(): U16 => 201 fun string(): String => \"201 Created\" primitive StatusAccepted is Status fun apply(): U16 => 202 fun string(): String => \"202 Accepted\" primitive StatusNonAuthoritativeInfo is Status fun apply(): U16 => 203 fun string(): String => \"203 Non-Authoritative Information\" primitive StatusNoContent is Status fun apply(): U16 => 204 fun string(): String => \"204 No Content\" primitive StatusResetContent is Status fun apply(): U16 => 205 fun string(): String => \"205 Reset Content\" primitive StatusPartialContent is Status fun apply(): U16 => 206 fun string(): String => \"206 Partial Content\" primitive StatusMultipleChoices is Status fun apply(): U16 => 300 fun string(): String => \"300 Multiple Choices\" primitive StatusMovedPermanently is Status fun apply(): U16 => 301 fun string(): String => \"301 Moved Permanently\" primitive StatusFound is Status fun apply(): U16 => 302 fun string(): String => \"302 Found\" primitive StatusSeeOther is Status fun apply(): U16 => 303 fun string(): String => \"303 See Other\" primitive StatusNotModified is Status fun apply(): U16 => 304 fun string(): String => \"304 Not Modified\" primitive StatusUseProxy is Status fun apply(): U16 => 305 fun string(): String => \"305 Use Proxy\" primitive StatusTemporaryRedirect is Status fun apply(): U16 => 307 fun string(): String => \"307 Temporary Redirect\" primitive StatusBadRequest is Status fun apply(): U16 => 400 fun string(): String => \"400 Bad Request\" primitive StatusUnauthorized is Status fun apply(): U16 => 401 fun string(): String => \"401 Unauthorized\" primitive StatusPaymentRequired is Status fun apply(): U16 => 402 fun string(): String => \"402 Payment Required\" primitive StatusForbidden is Status fun apply(): U16 => 403 fun string(): String => \"403 Forbidden\" primitive StatusNotFound is Status fun apply(): U16 => 404 fun string(): String => \"404 Not Found\" primitive StatusMethodNotAllowed is Status fun apply(): U16 => 405 fun string(): String => \"405 Method Not Allowed\" primitive StatusNotAcceptable is Status fun apply(): U16 => 406 fun string(): String => \"406 Not Acceptable\" primitive StatusProxyAuthRequired is Status fun apply(): U16 => 407 fun string(): String => \"407 Proxy Authentication Required\" primitive StatusRequestTimeout is Status fun apply(): U16 => 408 fun string(): String => \"408 Request Timeout\" primitive StatusConflict is Status fun apply(): U16 => 409 fun string(): String => \"409 Conflict\" primitive StatusGone is Status fun apply(): U16 => 410 fun string(): String => \"410 Gone\" primitive StatusLengthRequired is Status fun apply(): U16 => 411 fun string(): String => \"411 Length Required\" primitive StatusPreconditionFailed is Status fun apply(): U16 => 412 fun string(): String => \"412 Precondition Failed\" primitive StatusRequestEntityTooLarge is Status fun apply(): U16 => 413 fun string(): String => \"413 Request Entity Too Large\" primitive StatusRequestURITooLong is Status fun apply(): U16 => 414 fun string(): String => \"414 Request URI Too Long\" primitive StatusUnsupportedMediaType is Status fun apply(): U16 => 415 fun string(): String => \"415 Unsupported Media Type\" primitive StatusRequestedRangeNotSatisfiable is Status fun apply(): U16 => 416 fun string(): String => \"416 Requested Range Not Satisfiable\" primitive StatusExpectationFailed is Status fun apply(): U16 => 417 fun string(): String => \"417 Expectation Failed\" primitive StatusTeapot is Status fun apply(): U16 => 418 fun string(): String => \"418 I'm a teapot\" primitive StatusPreconditionRequired is Status fun apply(): U16 => 428 fun string(): String => \"428 Precondition Required\" primitive StatusTooManyRequests is Status fun apply(): U16 => 429 fun string(): String => \"429 Too Many Requests\" primitive StatusRequestHeaderFieldsTooLarge is Status fun apply(): U16 => 431 fun string(): String => \"431 Request Header Fields Too Large\" primitive StatusUnavailableForLegalReasons is Status fun apply(): U16 => 451 fun string(): String => \"451 Unavailable For Legal Reasons\" primitive StatusInternalServerError is Status fun apply(): U16 => 500 fun string(): String => \"500 Internal Server Error\" primitive StatusNotImplemented is Status fun apply(): U16 => 501 fun string(): String => \"501 Not Implemented\" primitive StatusBadGateway is Status fun apply(): U16 => 502 fun string(): String => \"502 Bad Gateway\" primitive StatusServiceUnavailable is Status fun apply(): U16 => 503 fun string(): String => \"503 Service Unavailable\" primitive StatusGatewayTimeout is Status fun apply(): U16 => 504 fun string(): String => \"504 Gateway Timeout\" primitive StatusHTTPVersionNotSupported is Status fun apply(): U16 => 505 fun string(): String => \"505 HTTP Version Not Supported\" primitive StatusNetworkAuthenticationRequired is Status fun apply(): U16 => 511 fun string(): String => \"511 Network Authentication Required\"","title":"Status"},{"location":"src/http/url/","text":"class val URL \"\"\" Holds the components of a URL. These are always stored as valid, URL-encoded values. \"\"\" var scheme: String = \"\" \"\"\" URL scheme. If the given URL does not provide a scheme, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.1). \"\"\" var user: String = \"\" \"\"\" URL user as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide user information, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1). \"\"\" var password: String = \"\" \"\"\" URL password as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide a password, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1). \"\"\" var host: String = \"\" \"\"\" URL host as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide a host, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.2). \"\"\" var port: U16 = 0 \"\"\" URL port as part of the URLs authority component: ``` authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ] ``` If the URL does not provide a port, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.3). \"\"\" var path: String = \"\" \"\"\" URL path component. If the URL does not provide a path component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.3). \"\"\" var query: String = \"\" \"\"\" URL query component. If the URL does not provide a query component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.4). \"\"\" var fragment: String = \"\" \"\"\" Url fragment identifier component. If the URL does not provide a fragment identifier component, this will be the empty string. See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.5). \"\"\" new val create() => \"\"\" Create an empty URL. \"\"\" None new val build(from: String, percent_encoded: Bool = true) ? => \"\"\" Parse the URL string into its components. If it isn't URL encoded, encode it. If existing URL encoding is invalid, raise an error. \"\"\" _parse(from)? if not URLEncode.check_scheme(scheme) then error end user = URLEncode.encode(user, URLPartUser, percent_encoded)? password = URLEncode.encode(password, URLPartPassword, percent_encoded)? host = URLEncode.encode(host, URLPartHost, percent_encoded)? path = URLEncode.encode(path, URLPartPath, percent_encoded)? query = URLEncode.encode(query, URLPartQuery, percent_encoded)? fragment = URLEncode.encode(fragment, URLPartFragment, percent_encoded)? new val valid(from: String) ? => \"\"\" Parse the URL string into its components. If it isn't URL encoded, raise an error. \"\"\" _parse(from)? if not is_valid() then error end fun is_valid(): Bool => \"\"\" Return true if all elements are correctly URL encoded. \"\"\" URLEncode.check_scheme(scheme) and URLEncode.check(user, URLPartUser) and URLEncode.check(password, URLPartPassword) and URLEncode.check(host, URLPartHost) and URLEncode.check(path, URLPartPath) and URLEncode.check(query, URLPartQuery) and URLEncode.check(fragment, URLPartFragment) fun string(): String iso^ => \"\"\" Combine the components into a string. \"\"\" let len = scheme.size() + 3 + user.size() + 1 + password.size() + 1 + host.size() + 6 + path.size() + 1 + query.size() + 1 + fragment.size() let s = recover String(len) end if scheme.size() > 0 then s.append(scheme) s.append(\":\") end if (user.size() > 0) or (host.size() > 0) then s.append(\"//\") end if user.size() > 0 then s.append(user) if password.size() > 0 then s.append(\":\") s.append(password) end s.append(\"@\") end if host.size() > 0 then s.append(host) // Do not output port if it's the scheme default. if port != default_port() then s.append(\":\") s.append(port.string()) end end s.append(path) if query.size() > 0 then s.append(\"?\") s.append(query) end if fragment.size() > 0 then s.append(\"#\") s.append(fragment) end consume s fun val join(that: URL): URL => \"\"\" Using this as a base URL, concatenate with another, possibly relative, URL in the same way a browser does for a link. \"\"\" // TODO: this fun default_port(): U16 => \"\"\" Report the default port for our scheme. Returns 0 for unrecognised schemes. \"\"\" match scheme | \"http\" => 80 | \"https\" => 443 else 0 end fun ref _parse(from: String) ? => \"\"\" Parse the given string as a URL. Raises an error on invalid port number. \"\"\" (var offset, scheme) = _parse_scheme(from) (offset, let authority) = _parse_part(from, \"//\", \"/?#\", offset) (offset, path) = _parse_part(from, \"\", \"?#\", offset) (offset, query) = _parse_part(from, \"?\", \"#\", offset) (offset, fragment) = _parse_part(from, \"#\", \"\", offset) if path.size() == 0 then // An empty path is a root path. path = \"/\" end (var userinfo, var hostport) = _split(authority, '@') if hostport.size() == 0 then // No '@' found, hostport is whole of authority. hostport = userinfo = \"\" end (user, password) = _split(userinfo, ':') (host, var port_str) = _parse_hostport(hostport) port = if port_str.size() > 0 then port_str.u16()? else default_port() end fun _parse_scheme(from: String): (/*offset*/ISize, /*scheme*/String) => \"\"\" Find the scheme, if any, at the start of the given string. The offset of the part following the scheme is returned. \"\"\" // We have a scheme only if we have a ':' before any of \"/?#\". try var i = USize(0) while i < from.size() do let c = from(i)? if c == ':' then // Scheme found. return ((i + 1).isize(), from.substring(0, i.isize())) end if (c == '/') or (c == '?') or (c == '#') then // No scheme. return (0, \"\") end i = i + 1 end end // End of string reached without finding any relevant terminators. (0, \"\") fun _parse_part( from: String, prefix: String, terminators: String, offset: ISize) : (/*offset*/ISize, /*part*/String) => \"\"\" Attempt to parse the specified part out of the given string. Only attempt the parse if the given prefix is found first. Pass \"\" if no prefix is needed. The part ends when any one of the given terminator characters is found, or the end of the input is reached. The offset of the terminator is returned, if one is found. \"\"\" if (prefix.size() > 0) and (not from.at(prefix, offset)) then // Prefix not found. return (offset, \"\") end let start = offset + prefix.size().isize() try var i = start.usize() while i < from.size() do let c = from(i)? var j = USize(0) while j < terminators.size() do if terminators(j)? == c then // Terminator found. return (i.isize(), from.substring(start, i.isize())) end j = j + 1 end i = i + 1 end end // No terminator found, take whole string. (from.size().isize(), from.substring(start)) fun _split(src: String, separator: U8): (String, String) => \"\"\" Split the given string in 2 around the first instance of the specified separator. If the string does not contain the separator then the first resulting string is the whole src and the second is empty. \"\"\" try var i = USize(0) while i < src.size() do if src(i)? == separator then // Separator found. return (src.substring(0, i.isize()), src.substring((i + 1).isize())) end i = i + 1 end end // Separator not found. (src, \"\") fun _parse_hostport(hostport: String): (/*host*/String, /*port*/String) => \"\"\" Split the given \"host and port\" string into the host and port parts. \"\"\" try if (hostport.size() == 0) or (hostport(0)? != '[') then // This is not an IPv6 format host, just split at the first ':'. return _split(hostport, ':') end // This is an IPv6 format host, need to find the ']' var i = USize(0) var terminator = U8(']') while i < hostport.size() do if hostport(i)? == terminator then if terminator == ':' then // ':' found, now we can separate the host and port return (hostport.substring(0, i.isize()), hostport.substring((i + 1).isize())) end // ']' found, now find ':' terminator = ':' end i = i + 1 end end // ':' not found, we have no port. (hostport, \"\")","title":"Url"},{"location":"src/http/url_encode/","text":"primitive URLPartUser primitive URLPartPassword primitive URLPartHost primitive URLPartPath primitive URLPartQuery primitive URLPartFragment type URLPart is ( URLPartUser | URLPartPassword | URLPartHost | URLPartPath | URLPartQuery | URLPartFragment ) primitive URLEncode \"\"\" Functions for checking, encoding, and decoding parts of URLs. \"\"\" fun encode(from: String, part: URLPart, percent_encoded: Bool = true) : String ? => \"\"\" URL encode and normilase the given string. The percent_encoded parameter indicates how '%' characters should be interpretted. true => given string is already at least partially encoded, so '%'s indicate an encoded character. false => given string is not yet encoded at all, so '%'s are just '%'s. An error is raised on invalid existing encoding or illegal characters that cannot be encoded. \"\"\" if _is_host_ipv6(from, part)? then return from end let out = recover String(from.size()) end var i = USize(0) while i < from.size() do var c = from(i)? var should_encode = false if (c == '%') and percent_encoded then // Treat % as an encoded character. // _unhex() will throw on bad / missing hex digit. c = (_unhex(from(i + 1)?)? << 4) or _unhex(from(i + 2)?)? should_encode = not _normal_decode(c, part) i = i + 3 else // Not an encoded character. should_encode = not _is_char_legal(c, part) i = i + 1 end if should_encode then out.push('%') out.push(_hex(c >> 4)?) out.push(_hex(c and 0xF)?) else out.push(c) end end out fun decode(from: String): String ? => \"\"\" URL decode a string. Raise an error on invalid URL encoded. \"\"\" let out = recover String(from.size()) end var i = USize(0) while i < from.size() do let c = from(i)? if c == '%' then // _unhex() will throw on bad / missing hex digit. let value = (_unhex(from(i + 1)?)? << 4) or _unhex(from(i + 2)?)? out.push(value) i = i + 3 elseif c == '+' then out.push(' ') i = i + 1 else out.push(c) i = i + 1 end end out fun check_scheme(scheme: String): Bool => \"\"\" Check that the given string is a valid scheme. \"\"\" try var i = USize(0) while i < scheme.size() do let c = scheme(i)? if ((c < 'a') or (c > 'z')) and ((c < 'A') or (c > 'Z')) and ((c < '0') or (c > '9')) and (c != '-') and (c != '+') and (c != '.') then return false end i = i + 1 end end true fun check(from: String, part: URLPart): Bool => \"\"\" Check that the given string is valid to be the given URL part without further encoding. Canonical form is not checked for, merely validity. \"\"\" try if _is_host_ipv6(from, part)? then return true end else return false end try var i = USize(0) while i < from.size() do let c = from(i)? if c == '%' then // Character is encoded. // _unhex() will throw on bad / missing hex digit. _unhex(from(i + 1)?)? _unhex(from(i + 2)?)? i = i + 3 elseif _is_char_legal(c, part) then i = i + 1 else return false end end true else false end fun _is_char_legal(value: U8, part: URLPart): Bool => \"\"\" Determine whether the given character is legal to appear in the specified URL part. \"\"\" // The unreserved and sub-delim characters are always allowed. if ((value >= 'a') and (value <= 'z')) or ((value >= 'A') and (value <= 'Z')) or ((value >= '0') and (value <= '9')) or (value == '-') or (value == '.') or (value == '_') or (value == '~') or (value == '!') or (value == '$') or (value == '&') or (value == '\\'') or (value == '(') or (value == ')') or (value == '*') or (value == '+') or (value == ',') or (value == ';') or (value == '=') then return true end // Which general delims are allowed depends on the part. match part | URLPartPassword => (value == ':') | URLPartPath => (value == ':') or (value == '@') or (value == '/') | URLPartQuery => (value == ':') or (value == '@') or (value == '/') or (value == '?') | URLPartFragment => (value == ':') or (value == '@') or (value == '/') or (value == '?') else false end fun _normal_decode(value: U8, part: URLPart): Bool => \"\"\" Determine whether the given character should be decoded to give normal form. Some characters, such as sub-delims, are valid to have either in encoded or unencoded form. These should be left as they are when normalising. This will return false for such characters. \"\"\" // The unreserved characters should always be decoded. if ((value >= 'a') and (value <= 'z')) or ((value >= 'A') and (value <= 'Z')) or ((value >= '0') and (value <= '9')) or (value == '-') or (value == '_') or (value == '.') or (value == '~') then return true end // Which general delims to decode depends on the part. match part | URLPartPassword => (value == ':') | URLPartPath => (value == ':') or (value == '@') or (value == '/') | URLPartQuery => (value == ':') or (value == '@') or (value == '/') or (value == '?') | URLPartFragment => (value == ':') or (value == '@') or (value == '/') or (value == '?') else false end fun _is_host_ipv6(host: String, part: URLPart): Bool ? => \"\"\" Check whether the given string is a valid IPv6 format host. Returns: true if string is a valid IPv6 format host. false if string is not an IPv6 foramt host at all. Raises an error if string is an invalid IPv6 format host. \"\"\" try if (part isnt URLPartHost) or (host.size() == 0) or (host(0)? != '[') then return false end end // We are an IPv6 format host, ie a host starting with a '['. var i = USize(1) while i < (host.size() - 1) do let c = host(i)? // Only hex digits, ':' and '.' and allowed. if ((c < 'a') or (c > 'f')) and ((c < 'A') or (c > 'F')) and ((c < '0') or (c > '9')) and (c != ':') and (c != '.') then error end i = i + 1 end // Must end with a ']'. if host(host.size() - 1)? != ']' then error end true fun _hex(value: U8): U8 ? => \"\"\" Turn 4 bits into a hex value. \"\"\" if value < 10 then value + '0' elseif value < 16 then (value + 'A') - 10 else error end fun _unhex(value: U8): U8 ? => \"\"\" Turn a hex value into 4 bits. \"\"\" if (value >= '0') and (value <= '9') then value - '0' elseif (value >= 'A') and (value <= 'F') then (value - 'A') + 10 elseif (value >= 'a') and (value <= 'f') then (value - 'a') + 10 else error end","title":"Url encode"}]}